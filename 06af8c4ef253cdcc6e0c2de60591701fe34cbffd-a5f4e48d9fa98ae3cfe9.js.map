{"version":3,"file":"06af8c4ef253cdcc6e0c2de60591701fe34cbffd-a5f4e48d9fa98ae3cfe9.js","mappings":"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","sources":["webpack://satsummit.io/./src/components/agenda/linked-speaker.tsx","webpack://satsummit.io/./src/components/mdx-prose.tsx","webpack://satsummit.io/./src/components/updates/updates-hero.tsx","webpack://satsummit.io/./src/utils/date.ts","webpack://satsummit.io/./node_modules/@chakra-ui/tag/dist/chunk-RPO2WXNL.mjs","webpack://satsummit.io/./node_modules/@mdx-js/react/lib/index.js","webpack://satsummit.io/./node_modules/date-fns/constructNow.mjs","webpack://satsummit.io/./node_modules/date-fns/compareAsc.mjs","webpack://satsummit.io/./node_modules/date-fns/differenceInCalendarMonths.mjs","webpack://satsummit.io/./node_modules/date-fns/endOfDay.mjs","webpack://satsummit.io/./node_modules/date-fns/endOfMonth.mjs","webpack://satsummit.io/./node_modules/date-fns/isLastDayOfMonth.mjs","webpack://satsummit.io/./node_modules/date-fns/differenceInMonths.mjs","webpack://satsummit.io/./node_modules/date-fns/differenceInMilliseconds.mjs","webpack://satsummit.io/./node_modules/date-fns/differenceInSeconds.mjs","webpack://satsummit.io/./node_modules/date-fns/_lib/getRoundingMethod.mjs","webpack://satsummit.io/./node_modules/date-fns/formatDistance.mjs","webpack://satsummit.io/./node_modules/date-fns/formatDistanceToNow.mjs"],"sourcesContent":["import React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport SmartLink from '$components/smart-link';\nimport { useEditionCId } from '$context/edition';\n\nexport function LinkedSpeaker(props: { name: string }) {\n  const { name } = props;\n\n  const editionCId = useEditionCId();\n\n  const data = useStaticQuery<{\n    allPeople: { nodes: Queries.People[] };\n  }>(graphql`\n    query {\n      allPeople {\n        nodes {\n          slug\n          title\n          group\n        }\n      }\n    }\n  `);\n\n  const person = data.allPeople.nodes.find((p) => p.slug === name);\n\n  if (!person || person.group !== 'main') {\n    return <strong>{person?.title || name}</strong>;\n  }\n\n  // If there's an edition, use it.\n  const prefix = editionCId ? `/${editionCId}` : '';\n\n  return (\n    <SmartLink to={`${prefix}/speakers/${person.slug}`}>\n      <strong>{person.title}</strong>\n    </SmartLink>\n  );\n}\n","import React from 'react';\nimport { MDXProvider } from '@mdx-js/react';\nimport { Box, Divider } from '@chakra-ui/react';\nimport { Prose, ProseProps } from '@nikolovlazar/chakra-ui-prose';\n\nimport SmartLink from './smart-link';\nimport { LinkedSpeaker } from './agenda/linked-speaker';\n\nexport function MDXProse(\n  props: React.ComponentProps<typeof MDXProvider> & ProseProps\n) {\n  const { children, ...rest } = props;\n\n  return (\n    <MDXProvider\n      components={{\n        Speaker: LinkedSpeaker,\n        hr: (props) => <Divider borderColor='base.200a' size='sm' {...props} />,\n        /* eslint-disable-next-line  */\n        a: (props: any) => (\n          <SmartLink\n            to={props.href}\n            color='primary.500'\n            {...props}\n            sx={{\n              '&.anchor-heading': {\n                color: 'inherit'\n              }\n            }}\n          />\n        )\n      }}\n    >\n      <Box as={Prose} {...rest}>{children}</Box>\n    </MDXProvider>\n  );\n}\n","import React from 'react';\nimport { Box, Flex, Tag, Text } from '@chakra-ui/react';\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\n\nimport { PageHeroFoundation, PageHeroHeadline } from '$components/page-hero';\n\ninterface UpdatesHeroProps {\n  title: string;\n  lead?: string;\n  published: string;\n  image?: IGatsbyImageData;\n  tags?: string[];\n}\n\nexport default function UpdatesHero(props: UpdatesHeroProps) {\n  const { title, lead, published, tags, image } = props;\n\n  return (\n    <PageHeroFoundation\n      innerProps={{\n        flexFlow: { base: 'column', md: 'row' },\n        gap: 8,\n        alignItems: 'normal'\n      }}\n    >\n      <Flex\n        flexFlow='column'\n        gap='4'\n        maxW={{ base: '100%', sm: 'container.sm', md: '50%' }}\n      >\n        <Box>\n          <PageHeroHeadline\n            title={title}\n            parent={{\n              url: `/updates`,\n              title: 'Updates'\n            }}\n          />\n          {published}\n        </Box>\n        {lead && (\n          <Text textStyle={{ base: 'lead.md', md: 'lead.lg' }}>{lead}</Text>\n        )}\n\n        {!!tags?.length && (\n          <Flex gap={2} mt={4}>\n            {tags.map((tag) => (\n              <Tag key={tag} variant='satsummit-dark'>\n                {tag}\n              </Tag>\n            ))}\n          </Flex>\n        )}\n      </Flex>\n      {image && (\n        <Box\n          as={GatsbyImage}\n          image={image}\n          alt='Decorative picture for this post'\n          borderRadius='sm'\n          flexGrow={1}\n        />\n      )}\n    </PageHeroFoundation>\n  );\n}\n","import { format } from 'date-fns';\n\n/**\n * Create a date which matches the input date offsetting the timezone to match\n * the user's.\n * If the user is in UTC-5 time and the date string is in UTC the date will be\n * constructed disregarding the input date's timezone.\n * Ex:\n * input: 2019-01-01T00:00:00Z\n * normal output: 2018-12-31T19:00:00 -05:00\n * utcDate output: 2019-01-01T00:00:00 -05:00\n *\n * Basically it parses the date ignoring the timezone and treats it as if the\n * date is already in the user's Tz.\n * Times I had timezone related bugs and this fn saved me: 8\n *\n * Reverse function of userTzDate2utcString()\n *\n * @param {string} str Date String\n * @returns Date\n */\nexport function utcString2userTzDate(str?: string | null) {\n  // Always return a Date even if invalid\n  if (typeof str !== 'string') {\n    return new Date('invalid');\n  }\n\n  // The date should always be in the user's TZ but the input string affects\n  // how the date is constructed.\n  // An input string of only year or with `-` (2020-01 | 2020-1-1) will be\n  // considered to be in ISO format, meaning that the user date will be this\n  // date +- the TZ offset. For example:\n  // 2020-01-01\n  //   Tue Dec 31 2019 19:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 01:00:00 GMT+0100 (Central European Time)\n  //\n  // whereas 2020/01/01\n  //   Wed Jan 01 2020 00:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 00:00:00 GMT+0100 (Central European Time)\n  // and if converted to ISO\n  //   2020-01-01T05:00:00.000Z\n  //   2020-01-01T01:00:00.000Z\n  //\n  // The code below ensures that all dates behave the same.\n  //\n  const isoYearOrMonth = str.match(/^([0-9]{4})(?:-([0-9]{1,2}))?$/);\n  const isoMatch = str.match(/^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})/);\n\n  if (isoYearOrMonth || isoMatch) {\n    const date = new Date(str);\n    // If the date is not valid, return it and be done.\n    if (isNaN(date.getTime())) return date;\n    const offset = date.getTimezoneOffset();\n    date.setTime(date.getTime() + offset * 60 * 1000);\n    return date;\n  } else {\n    // For the full date view Date does a good job, except with the ordinal\n    // numbers. Remove those from the date before parsing.\n    return new Date(str.replace(/([0-9])(st|nd|rd|th)/g, '$1'));\n  }\n}\n\n/**\n * Converts the date to a ISO string offsetting the timezone.\n *\n * Basically it coverts the date to a string ignoring the timezone and treating\n * it as if the date is already in UTC.\n *\n * Reverse function of utcString2userTzDate()\n *\n * @param date The Date\n * @returns string\n */\nexport function userTzDate2utcString(date: Date) {\n  const tz = date.getTimezoneOffset();\n  const d = new Date(date.getTime() - tz * 60000);\n  return d.toISOString();\n}\n\n// Creates a human readable string of dates without much repetition.\n// Groups by year and month, then lists the days.\n// Example:\n// The dates: [2022-09-28, 2022-09-29, 2022-10-01, 2022-01-01]\n// Will be displayed as:\n// September 28 & 29 & October 01, 2022 & January 01, 2022\nexport function multiDateDisplay(dates: Date[]) {\n  const group = dates.reduce(\n    (acc, date) => {\n      // Group by month and year\n      const y = date.getFullYear();\n      const m = date.getMonth();\n\n      const yGroup = acc[y] || {};\n      const mGroup = yGroup[m] || [];\n\n      return {\n        ...acc,\n        [y]: {\n          ...yGroup,\n          [m]: [...mGroup, date]\n        }\n      };\n    },\n    {} as Record<number, Record<number, Date[]>>\n  );\n\n  return Object.entries(group)\n    .map(([y, yGroup]) => {\n      const months = Object.entries(yGroup).map(([, mGroup]) => {\n        const days = mGroup.map((d) => format(d, 'dd')).join(' & ');\n        return `${format(mGroup[0], 'MMMM')} ${days}`;\n      });\n      return `${months.join(' & ')}, ${y}`;\n    })\n    .join(' & ');\n}","'use client'\n\n// src/tag.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [TagStylesProvider, useTagStyles] = createContext({\n  name: `TagStylesContext`,\n  errorMessage: `useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Tag />\" `\n});\nvar Tag = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tag\", props);\n  const ownProps = omitThemingProps(props);\n  const containerStyles = {\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\",\n    ...styles.container\n  };\n  return /* @__PURE__ */ jsx(TagStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(chakra.span, { ref, ...ownProps, __css: containerStyles }) });\n});\nTag.displayName = \"Tag\";\nvar TagLabel = forwardRef((props, ref) => {\n  const styles = useTagStyles();\n  return /* @__PURE__ */ jsx(chakra.span, { ref, noOfLines: 1, ...props, __css: styles.label });\n});\nTagLabel.displayName = \"TagLabel\";\nvar TagLeftIcon = forwardRef((props, ref) => /* @__PURE__ */ jsx(Icon, { ref, verticalAlign: \"top\", marginEnd: \"0.5rem\", ...props }));\nTagLeftIcon.displayName = \"TagLeftIcon\";\nvar TagRightIcon = forwardRef((props, ref) => /* @__PURE__ */ jsx(Icon, { ref, verticalAlign: \"top\", marginStart: \"0.5rem\", ...props }));\nTagRightIcon.displayName = \"TagRightIcon\";\nvar TagCloseIcon = (props) => /* @__PURE__ */ jsx(Icon, { verticalAlign: \"inherit\", viewBox: \"0 0 512 512\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n  }\n) });\nTagCloseIcon.displayName = \"TagCloseIcon\";\nvar TagCloseButton = forwardRef(\n  (props, ref) => {\n    const { isDisabled, children, ...rest } = props;\n    const styles = useTagStyles();\n    const btnStyles = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      outline: \"0\",\n      ...styles.closeButton\n    };\n    return /* @__PURE__ */ jsx(\n      chakra.button,\n      {\n        ref,\n        \"aria-label\": \"close\",\n        ...rest,\n        type: \"button\",\n        disabled: isDisabled,\n        __css: btnStyles,\n        children: children || /* @__PURE__ */ jsx(TagCloseIcon, {})\n      }\n    );\n  }\n);\nTagCloseButton.displayName = \"TagCloseButton\";\n\nexport {\n  useTagStyles,\n  Tag,\n  TagLabel,\n  TagLeftIcon,\n  TagRightIcon,\n  TagCloseButton\n};\n//# sourceMappingURL=chunk-RPO2WXNL.mjs.map","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","import { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateType | number | string,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const diff = _dateLeft.getTime() - _dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();\n  const monthDiff = _dateLeft.getMonth() - _dateRight.getMonth();\n\n  return yearDiff * 12 + monthDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date) {\n  const _date = toDate(date);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { endOfDay } from \"./endOfDay.mjs\";\nimport { endOfMonth } from \"./endOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date) {\n  const _date = toDate(date);\n  return +endOfDay(_date) === +endOfMonth(_date);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(\n    differenceInCalendarMonths(_dateLeft, _dateRight),\n  );\n  let result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (\n      isLastDayOfMonth(toDate(dateLeft)) &&\n      difference === 1 &&\n      compareAsc(dateLeft, _dateRight) === 1\n    ) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(dateLeft, dateRight) {\n  return +toDate(dateLeft) - +toDate(dateRight);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(dateLeft, dateRight, options) {\n  const diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { minutesInDay, minutesInMonth } from \"./constants.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport function formatDistance(date, baseDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = compareAsc(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = toDate(baseDate);\n    dateRight = toDate(date);\n  } else {\n    dateLeft = toDate(date);\n    dateRight = toDate(baseDate);\n  }\n\n  const seconds = differenceInSeconds(dateRight, dateLeft);\n  const offsetInSeconds =\n    (getTimezoneOffsetInMilliseconds(dateRight) -\n      getTimezoneOffsetInMilliseconds(dateLeft)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistance;\n","import { constructNow } from \"./constructNow.mjs\";\nimport { formatDistance } from \"./formatDistance.mjs\";\n\n/**\n * The {@link formatDistanceToNow} function options.\n */\n\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - The object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistanceToNow(date, options) {\n  return formatDistance(date, constructNow(date), options);\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceToNow;\n"],"names":["LinkedSpeaker","props","name","editionCId","useEditionCId","person","useStaticQuery","allPeople","nodes","find","p","slug","group","React","title","prefix","SmartLink","to","MDXProse","children","rest","MDXProvider","components","Speaker","hr","Divider","Object","assign","borderColor","size","a","href","color","sx","Box","as","Prose","UpdatesHero","lead","published","tags","image","PageHeroFoundation","innerProps","flexFlow","base","md","gap","alignItems","Flex","maxW","sm","PageHeroHeadline","parent","url","Text","textStyle","length","mt","map","tag","Tag","key","variant","GatsbyImage","alt","borderRadius","flexGrow","utcString2userTzDate","str","Date","isoYearOrMonth","match","isoMatch","date","isNaN","getTime","offset","getTimezoneOffset","setTime","replace","multiDateDisplay","dates","reduce","acc","y","getFullYear","m","getMonth","yGroup","mGroup","concat","_toConsumableArray","entries","_ref","_ref2","days","d","format","join","TagStylesProvider","useTagStyles","errorMessage","ref","styles","ownProps","containerStyles","display","verticalAlign","maxWidth","container","jsx","value","span","__css","displayName","noOfLines","label","I","marginEnd","marginStart","TagCloseIcon","viewBox","fill","isDisabled","btnStyles","justifyContent","outline","closeButton","button","type","disabled","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","constructNow","now","compareAsc","dateLeft","dateRight","_dateLeft","toDate","_dateRight","diff","differenceInCalendarMonths","endOfDay","_date","setHours","endOfMonth","month","setFullYear","isLastDayOfMonth","differenceInMonths","sign","difference","Math","abs","result","getDate","setDate","setMonth","isLastMonthNotFull","Number","differenceInMilliseconds","differenceInSeconds","options","method","roundingMethod","number","trunc","formatDistance","baseDate","defaultOptions","locale","comparison","RangeError","localizeOptions","addSuffix","seconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","round","months","includeSeconds","hours","nearestMonth","monthsSinceStartOfYear","years","formatDistanceToNow"],"sourceRoot":""}