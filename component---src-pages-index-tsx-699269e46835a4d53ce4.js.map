{"version":3,"file":"component---src-pages-index-tsx-699269e46835a4d53ce4.js","mappings":"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","sources":["webpack://satsummit.io/./src/components/editions/edition-card.tsx","webpack://satsummit.io/./src/components/updates-fold.tsx","webpack://satsummit.io/./src/components/updates/updates-card.tsx","webpack://satsummit.io/./src/pages/index.tsx","webpack://satsummit.io/./src/utils/date.ts","webpack://satsummit.io/./node_modules/date-fns/isSameDay.mjs","webpack://satsummit.io/./node_modules/date-fns/isToday.mjs","webpack://satsummit.io/./node_modules/date-fns/isFuture.mjs","webpack://satsummit.io/./src/utils/use-future-past-edition.ts","webpack://satsummit.io/./node_modules/@chakra-ui/tag/dist/chunk-RPO2WXNL.mjs","webpack://satsummit.io/./node_modules/date-fns/constructNow.mjs"],"sourcesContent":["import React from 'react';\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\nimport { Box, Heading, Text } from '@chakra-ui/react';\nimport { CollecticonExpandTopRight } from '@devseed-ui/collecticons-chakra';\n\nimport SmartLink from '$components/smart-link';\n\nimport { multiDateDisplay } from '$utils/date';\n\nimport cloudSmallUrl from '$images/banner/banner--cloud-small@2x.png';\n\ninterface EditionCardProps {\n  title: string;\n  url: string;\n  isExternal?: boolean;\n  dates: Date[];\n  image?: React.ReactElement | IGatsbyImageData;\n}\n\nexport function EditionCard(props: EditionCardProps) {\n  const { title, url, isExternal, dates, image } = props;\n\n  return (\n    <SmartLink\n      to={url}\n      position='relative'\n      minH={{ base: '18rem', md: '24rem' }}\n      display='flex'\n      flexDir='column'\n      justifyContent='end'\n      gap={4}\n      p={{ base: 4, md: 8 }}\n      overflow='hidden'\n      borderRadius='sm'\n      color='surface.500'\n      bgColor='primary.800'\n      bgImage={`url('${cloudSmallUrl}')`}\n      bgRepeat='no-repeat'\n      bgSize='auto 70%'\n      bgPosition='calc(100% + 8rem) bottom'\n      // Override background if image is provided.\n      bg={image ? 'none' : undefined}\n      _hover={{\n        textDecoration: 'none',\n        transform: 'translateY(-2px)'\n      }}\n      sx={{\n        '.gatsby-image-wrapper': {\n          position: 'absolute',\n          inset: 0,\n          zIndex: -1,\n          pointerEvents: 'none',\n\n          '&:after': {\n            content: '\"\"',\n            position: 'absolute',\n            inset: 0,\n            background:\n              'linear-gradient(180deg, rgba(13, 22, 88, 0) 0%, #0D1658 100%)',\n            mixBlendMode: 'multiply'\n          }\n        }\n      }}\n    >\n      {image ? (\n        React.isValidElement(image) ? (\n          image\n        ) : (\n          <GatsbyImage image={image as IGatsbyImageData} alt={title} />\n        )\n      ) : null}\n      {isExternal && (\n        <Box\n          position='absolute'\n          right={0}\n          top={0}\n          p={4}\n          display='flex'\n          justifyContent='end'\n          w={20}\n          h={20}\n          bg='primary.500'\n          clipPath='polygon(0 0, 100% 100%, 100% 0);'\n        >\n          <CollecticonExpandTopRight display='block' />\n        </Box>\n      )}\n      <Box>\n        <Heading size='xl'>{title}</Heading>\n        <Text fontSize='sm' fontStyle='initial'>\n          {multiDateDisplay(dates)}\n        </Text>\n      </Box>\n      <Text>Satellite data for global development.</Text>\n    </SmartLink>\n  );\n}\n","import React from 'react';\nimport { getImage, IGatsbyImageData } from 'gatsby-plugin-image';\nimport {\n  Button,\n  Divider,\n  Flex,\n  Heading,\n  List,\n  ListItem\n} from '@chakra-ui/react';\n\nimport SmartLink from '$components/smart-link';\nimport { UpdatesCard } from '$components/updates/updates-card';\n\ninterface UpdatesFoldProps {\n  updates: {\n    title: string;\n    ago: string;\n    date: string;\n    slug: string;\n    id: string;\n    description: string;\n    tags: string[]\n    cover: {\n      src: IGatsbyImageData;\n    };\n    editions: {\n      edition: {\n        name: string;\n      };\n    }[];\n    parent: {\n      excerpt: string;\n    };\n  }[];\n}\n\nexport function UpdatesFold(props: UpdatesFoldProps) {\n  const { updates } = props;\n\n  if (!updates?.length) return null;\n\n  return (\n    <>\n      <Divider\n        borderColor='base.200a'\n        size='sm'\n        orientation='horizontal'\n        gridColumn='content-start/content-end'\n      />\n      <Flex\n        justifyContent='space-between'\n        gridColumn='content-start/content-end'\n      >\n        <Heading size='lg'>Updates</Heading>\n        <Button\n          as={SmartLink}\n          to='/updates'\n          variant='solid'\n          colorScheme='primary'\n        >\n          View all\n        </Button>\n      </Flex>\n\n      <List\n        gridColumn='content-start/content-end'\n        display='grid'\n        gap={{ base: 4, md: 8 }}\n        gridTemplateColumns={{\n          base: '1fr',\n          sm: 'repeat(2, 1fr)',\n          lg: 'repeat(3, 1fr)'\n        }}\n      >\n        {updates.map((update) => (\n          <ListItem key={update.id}>\n            <UpdatesCard\n              slug={update.slug}\n              title={update.title}\n              date={update.date || undefined}\n              ago={update.ago || undefined}\n              description={update.description || undefined}\n              parent={update.parent as { excerpt: string } | undefined}\n              editions={update.editions || []}\n              tags={update.tags || []}\n              cover={getImage(update.cover?.src as unknown as IGatsbyImageData)}\n            />\n          </ListItem>\n        ))}\n      </List>\n    </>\n  );\n}\n","import * as React from 'react';\nimport { Box, Flex, Heading, Tag, Text } from '@chakra-ui/react';\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\n\nimport SmartLink from '$components/smart-link';\n\ninterface UpdatesCardProps {\n  slug: string;\n  cover?: IGatsbyImageData;\n  title: string;\n  date?: string;\n  ago?: string;\n  description?: string;\n  parent?: { excerpt: string };\n  editions?: readonly { edition: { name: string } }[];\n  tags: readonly string[];\n}\n\nexport function UpdatesCard(props: UpdatesCardProps) {\n  const { slug, cover, title, date, ago, description, parent, editions, tags } =\n    props;\n\n  return (\n    <SmartLink\n      to={`/updates/${slug}`}\n      borderRadius='sm'\n      display='flex'\n      flexDir='column'\n      h='100%'\n      color='base.500'\n      bg='base.50'\n      _hover={{\n        textDecoration: 'none',\n        transform: 'translateY(-2px)'\n      }}\n      p={{ base: 4, md: 8 }}\n      gap={4}\n    >\n      {cover && (\n        <Box\n          mx={{ base: -4, md: -8 }}\n          mt={{ base: -4, md: -8 }}\n          overflow='hidden'\n          borderRadius='sm'\n        >\n          <GatsbyImage image={cover} alt='Post decorative cover' />\n        </Box>\n      )}\n      <Box mt={!cover ? '2.5rem' : undefined}>\n        <Heading size='xl'>{title}</Heading>\n        <Text\n          as='time'\n          dateTime={date || undefined}\n          fontSize='sm'\n          fontStyle='initial'\n        >\n          {ago}\n        </Text>\n      </Box>\n      <Text>\n        {description || (parent as { excerpt: string } | undefined)?.excerpt}\n      </Text>\n\n      {(editions || tags) && (\n        <Flex gap={2} mt='auto' wrap='wrap-reverse'>\n          {editions?.map((edition) => (\n            <Tag key={edition.edition.name} variant='satsummit-dark'>\n              {edition.edition.name}\n            </Tag>\n          ))}\n          {tags.map((tag) => (\n            <Tag key={tag} variant='satsummit-dark'>\n              {tag}\n            </Tag>\n          ))}\n        </Flex>\n      )}\n    </SmartLink>\n  );\n}\n","import React from 'react';\nimport { graphql, PageProps, type HeadFC } from 'gatsby';\nimport { getImage, IGatsbyImageData } from 'gatsby-plugin-image';\nimport { Button, Flex, Heading, List, ListItem } from '@chakra-ui/react';\n\nimport { useFuturePastEditions } from '$utils/use-future-past-edition';\nimport { utcString2userTzDate } from '$utils/date';\nimport PageLayout from '$components/page-layout';\nimport Seo from '$components/seo';\nimport { EditionCard } from '$components/editions/edition-card';\nimport { Hug } from '@devseed-ui/hug-chakra';\nimport { ItemMarker } from '$components/item-marker';\nimport SmartLink from '$components/smart-link';\nimport { UpdatesFold } from '$components/updates-fold';\nimport { PageHero } from '$components/page-hero';\n\ninterface PageQueryEdition {\n  name: string;\n  cId: string;\n  dates?: string[];\n  card: {\n    src: IGatsbyImageData;\n  };\n}\n\ninterface PageQuery {\n  allEdition: {\n    nodes: PageQueryEdition[];\n  };\n  allUpdates: {\n    nodes: {\n      title: string;\n      ago: string;\n      date: string;\n      slug: string;\n      id: string;\n      description: string;\n      tags: string[];\n      cover: {\n        src: IGatsbyImageData;\n      };\n      editions: {\n        edition: {\n          name: string;\n        };\n      }[];\n      parent: {\n        excerpt: string;\n      };\n    }[];\n  };\n}\n\nexport default function IndexPage(props: PageProps<PageQuery>) {\n  const {\n    data: { allEdition, allUpdates }\n  } = props;\n\n  const [future, past] = useFuturePastEditions<PageQueryEdition>(\n    allEdition.nodes\n  );\n\n  return (\n    <PageLayout>\n      <PageHero\n        title='Welcome to SatSummit'\n        lead='Convening leaders in the satellite industry and experts in global development since 2015.'\n      />\n      <Hug py={{ base: 8, md: 12 }}>\n        <Flex\n          justifyContent='space-between'\n          alignItems='center'\n          gridColumn='content-start/content-end'\n        >\n          <Heading size='2xl'>Editions</Heading>\n          <Button\n            as={SmartLink}\n            to='/editions'\n            variant='solid'\n            colorScheme='primary'\n            size={{ base: 'sm', lg: 'md' }}\n          >\n            View all\n          </Button>\n        </Flex>\n        <List\n          display='grid'\n          gap={{ base: 4, md: 8 }}\n          gridTemplateColumns={{ base: '1fr', md: '1fr 1fr' }}\n          gridColumn='content-start/content-end'\n        >\n          {future.map((edition) => (\n            <ListItem key={edition.cId} pos='relative'>\n              <EditionCard\n                title={edition.name}\n                url={`/${edition.cId}`}\n                dates={edition.dates?.map(utcString2userTzDate) || []}\n                image={getImage(edition.card?.src)}\n              />\n              <ItemMarker pos='absolute' top='2rem' left='-1rem'>\n                Coming up next\n              </ItemMarker>\n            </ListItem>\n          ))}\n          {past.map((edition) => (\n            <ListItem key={edition.cId}>\n              <EditionCard\n                title={edition.name}\n                url={`/${edition.cId}`}\n                dates={edition.dates?.map(utcString2userTzDate) || []}\n                image={getImage(edition.card?.src)}\n              />\n            </ListItem>\n          ))}\n        </List>\n        <UpdatesFold updates={allUpdates.nodes} />\n      </Hug>\n    </PageLayout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query IndexPage {\n    allEdition(sort: { dates: DESC }, limit: 2) {\n      nodes {\n        name\n        cId\n        dates\n        card {\n          src {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH, placeholder: BLURRED)\n            }\n          }\n        }\n      }\n    }\n    allUpdates(\n      filter: { published: { eq: true } }\n      sort: { date: DESC }\n      limit: 3\n    ) {\n      nodes {\n        title\n        ago: date(fromNow: true)\n        date\n        slug\n        id\n        description\n        tags\n        cover {\n          src {\n            childImageSharp {\n              gatsbyImageData(layout: FULL_WIDTH, placeholder: BLURRED)\n            }\n          }\n        }\n        editions {\n          edition {\n            name\n          }\n        }\n        parent {\n          ... on Mdx {\n            excerpt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const Head: HeadFC = () => <Seo title='Welcome' />;\n","import { format } from 'date-fns';\n\n/**\n * Create a date which matches the input date offsetting the timezone to match\n * the user's.\n * If the user is in UTC-5 time and the date string is in UTC the date will be\n * constructed disregarding the input date's timezone.\n * Ex:\n * input: 2019-01-01T00:00:00Z\n * normal output: 2018-12-31T19:00:00 -05:00\n * utcDate output: 2019-01-01T00:00:00 -05:00\n *\n * Basically it parses the date ignoring the timezone and treats it as if the\n * date is already in the user's Tz.\n * Times I had timezone related bugs and this fn saved me: 8\n *\n * Reverse function of userTzDate2utcString()\n *\n * @param {string} str Date String\n * @returns Date\n */\nexport function utcString2userTzDate(str?: string | null) {\n  // Always return a Date even if invalid\n  if (typeof str !== 'string') {\n    return new Date('invalid');\n  }\n\n  // The date should always be in the user's TZ but the input string affects\n  // how the date is constructed.\n  // An input string of only year or with `-` (2020-01 | 2020-1-1) will be\n  // considered to be in ISO format, meaning that the user date will be this\n  // date +- the TZ offset. For example:\n  // 2020-01-01\n  //   Tue Dec 31 2019 19:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 01:00:00 GMT+0100 (Central European Time)\n  //\n  // whereas 2020/01/01\n  //   Wed Jan 01 2020 00:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 00:00:00 GMT+0100 (Central European Time)\n  // and if converted to ISO\n  //   2020-01-01T05:00:00.000Z\n  //   2020-01-01T01:00:00.000Z\n  //\n  // The code below ensures that all dates behave the same.\n  //\n  const isoYearOrMonth = str.match(/^([0-9]{4})(?:-([0-9]{1,2}))?$/);\n  const isoMatch = str.match(/^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})/);\n\n  if (isoYearOrMonth || isoMatch) {\n    const date = new Date(str);\n    // If the date is not valid, return it and be done.\n    if (isNaN(date.getTime())) return date;\n    const offset = date.getTimezoneOffset();\n    date.setTime(date.getTime() + offset * 60 * 1000);\n    return date;\n  } else {\n    // For the full date view Date does a good job, except with the ordinal\n    // numbers. Remove those from the date before parsing.\n    return new Date(str.replace(/([0-9])(st|nd|rd|th)/g, '$1'));\n  }\n}\n\n/**\n * Converts the date to a ISO string offsetting the timezone.\n *\n * Basically it coverts the date to a string ignoring the timezone and treating\n * it as if the date is already in UTC.\n *\n * Reverse function of utcString2userTzDate()\n *\n * @param date The Date\n * @returns string\n */\nexport function userTzDate2utcString(date: Date) {\n  const tz = date.getTimezoneOffset();\n  const d = new Date(date.getTime() - tz * 60000);\n  return d.toISOString();\n}\n\n// Creates a human readable string of dates without much repetition.\n// Groups by year and month, then lists the days.\n// Example:\n// The dates: [2022-09-28, 2022-09-29, 2022-10-01, 2022-01-01]\n// Will be displayed as:\n// September 28 & 29 & October 01, 2022 & January 01, 2022\nexport function multiDateDisplay(dates: Date[]) {\n  const group = dates.reduce(\n    (acc, date) => {\n      // Group by month and year\n      const y = date.getFullYear();\n      const m = date.getMonth();\n\n      const yGroup = acc[y] || {};\n      const mGroup = yGroup[m] || [];\n\n      return {\n        ...acc,\n        [y]: {\n          ...yGroup,\n          [m]: [...mGroup, date]\n        }\n      };\n    },\n    {} as Record<number, Record<number, Date[]>>\n  );\n\n  return Object.entries(group)\n    .map(([y, yGroup]) => {\n      const months = Object.entries(yGroup).map(([, mGroup]) => {\n        const days = mGroup.map((d) => format(d, 'dd')).join(' & ');\n        return `${format(mGroup[0], 'MMMM')} ${days}`;\n      });\n      return `${months.join(' & ')}, ${y}`;\n    })\n    .join(' & ');\n}","import { startOfDay } from \"./startOfDay.mjs\";\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n\n * @returns The dates are in the same day (and year and month)\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nexport function isSameDay(dateLeft, dateRight) {\n  const dateLeftStartOfDay = startOfDay(dateLeft);\n  const dateRightStartOfDay = startOfDay(dateRight);\n\n  return +dateLeftStartOfDay === +dateRightStartOfDay;\n}\n\n// Fallback for modularized imports:\nexport default isSameDay;\n","import { constructNow } from \"./constructNow.mjs\";\nimport { isSameDay } from \"./isSameDay.mjs\";\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nexport function isToday(date) {\n  return isSameDay(date, constructNow(date));\n}\n\n// Fallback for modularized imports:\nexport default isToday;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isFuture\n * @category Common Helpers\n * @summary Is the given date in the future?\n * @pure false\n *\n * @description\n * Is the given date in the future?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is in the future\n *\n * @example\n * // If today is 6 October 2014, is 31 December 2014 in the future?\n * const result = isFuture(new Date(2014, 11, 31))\n * //=> true\n */\nexport function isFuture(date) {\n  return +toDate(date) > Date.now();\n}\n\n// Fallback for modularized imports:\nexport default isFuture;\n","import { useMemo } from 'react';\nimport { isFuture, isToday } from 'date-fns';\n\nimport { utcString2userTzDate } from './date';\n\nexport function useFuturePastEditions<T extends { dates?: string[] }>(\n  editions: T[]\n) {\n  return useMemo(\n    () =>\n      editions.reduce(\n        (acc, edition) => {\n          const current = edition.dates?.some((date) => {\n            const d = utcString2userTzDate(date);\n            return isToday(d) || isFuture(d);\n          });\n          if (current) {\n            return [[...acc[0], edition], acc[1]];\n          } else {\n            return [acc[0], [...acc[1], edition]];\n          }\n        },\n        [[], []] as T[][]\n      ),\n    [editions]\n  );\n}\n","'use client'\n\n// src/tag.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [TagStylesProvider, useTagStyles] = createContext({\n  name: `TagStylesContext`,\n  errorMessage: `useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Tag />\" `\n});\nvar Tag = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tag\", props);\n  const ownProps = omitThemingProps(props);\n  const containerStyles = {\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\",\n    ...styles.container\n  };\n  return /* @__PURE__ */ jsx(TagStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(chakra.span, { ref, ...ownProps, __css: containerStyles }) });\n});\nTag.displayName = \"Tag\";\nvar TagLabel = forwardRef((props, ref) => {\n  const styles = useTagStyles();\n  return /* @__PURE__ */ jsx(chakra.span, { ref, noOfLines: 1, ...props, __css: styles.label });\n});\nTagLabel.displayName = \"TagLabel\";\nvar TagLeftIcon = forwardRef((props, ref) => /* @__PURE__ */ jsx(Icon, { ref, verticalAlign: \"top\", marginEnd: \"0.5rem\", ...props }));\nTagLeftIcon.displayName = \"TagLeftIcon\";\nvar TagRightIcon = forwardRef((props, ref) => /* @__PURE__ */ jsx(Icon, { ref, verticalAlign: \"top\", marginStart: \"0.5rem\", ...props }));\nTagRightIcon.displayName = \"TagRightIcon\";\nvar TagCloseIcon = (props) => /* @__PURE__ */ jsx(Icon, { verticalAlign: \"inherit\", viewBox: \"0 0 512 512\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n  }\n) });\nTagCloseIcon.displayName = \"TagCloseIcon\";\nvar TagCloseButton = forwardRef(\n  (props, ref) => {\n    const { isDisabled, children, ...rest } = props;\n    const styles = useTagStyles();\n    const btnStyles = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      outline: \"0\",\n      ...styles.closeButton\n    };\n    return /* @__PURE__ */ jsx(\n      chakra.button,\n      {\n        ref,\n        \"aria-label\": \"close\",\n        ...rest,\n        type: \"button\",\n        disabled: isDisabled,\n        __css: btnStyles,\n        children: children || /* @__PURE__ */ jsx(TagCloseIcon, {})\n      }\n    );\n  }\n);\nTagCloseButton.displayName = \"TagCloseButton\";\n\nexport {\n  useTagStyles,\n  Tag,\n  TagLabel,\n  TagLeftIcon,\n  TagRightIcon,\n  TagCloseButton\n};\n//# sourceMappingURL=chunk-RPO2WXNL.mjs.map","import { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateType | number | string,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n"],"names":["EditionCard","props","title","url","isExternal","dates","image","React","SmartLink","to","position","minH","base","md","display","flexDir","justifyContent","gap","p","overflow","borderRadius","color","bgColor","bgImage","cloudSmallUrl","bgRepeat","bgSize","bgPosition","bg","undefined","_hover","textDecoration","transform","sx","inset","zIndex","pointerEvents","content","background","mixBlendMode","GatsbyImage","alt","Box","right","top","w","h","clipPath","CollecticonExpandTopRight","Heading","size","Text","fontSize","fontStyle","multiDateDisplay","UpdatesFold","updates","length","Divider","borderColor","orientation","gridColumn","Flex","Button","as","variant","colorScheme","List","gridTemplateColumns","sm","lg","map","update","_update$cover","ListItem","key","id","UpdatesCard","slug","date","ago","description","parent","editions","tags","cover","getImage","src","mx","mt","dateTime","excerpt","wrap","edition","Tag","name","tag","IndexPage","data","allEdition","allUpdates","future","past","useFuturePastEditions","nodes","PageLayout","PageHero","lead","Hug","py","alignItems","_edition$dates","_edition$card","cId","pos","utcString2userTzDate","card","ItemMarker","left","_edition$dates2","_edition$card2","Head","Seo","str","Date","isoYearOrMonth","match","isoMatch","isNaN","getTime","offset","getTimezoneOffset","setTime","replace","group","reduce","acc","y","getFullYear","m","getMonth","yGroup","mGroup","concat","_toConsumableArray","Object","entries","_ref","_ref2","days","d","format","join","isSameDay","dateLeft","dateRight","startOfDay","isToday","constructNow","isFuture","toDate","now","useMemo","some","TagStylesProvider","useTagStyles","errorMessage","ref","styles","ownProps","containerStyles","verticalAlign","maxWidth","container","jsx","value","children","span","__css","displayName","noOfLines","label","I","marginEnd","marginStart","TagCloseIcon","viewBox","fill","isDisabled","rest","btnStyles","outline","closeButton","button","type","disabled"],"sourceRoot":""}