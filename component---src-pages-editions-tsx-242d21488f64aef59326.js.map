{"version":3,"file":"component---src-pages-editions-tsx-242d21488f64aef59326.js","mappings":"yPAmBO,SAASA,EAAYC,GAC1B,MAAM,MAAEC,EAAK,IAAEC,EAAG,WAAEC,EAAU,MAAEC,EAAK,MAAEC,GAAUL,EAEjD,OACEM,EAAAA,cAACC,EAAAA,EAAS,CACRC,GAAIN,EACJO,SAAS,WACTC,KAAM,CAAEC,KAAM,QAASC,GAAI,SAC3BC,QAAQ,OACRC,QAAQ,SACRC,eAAe,MACfC,IAAK,EACLC,EAAG,CAAEN,KAAM,EAAGC,GAAI,GAClBM,SAAS,SACTC,aAAa,KACbC,MAAM,cACNC,QAAQ,cACRC,QAAS,QAAQC,EAAAA,MACjBC,SAAS,YACTC,OAAO,WACPC,WAAW,2BAEXC,GAAItB,EAAQ,YAASuB,EACrBC,OAAQ,CACNC,eAAgB,OAChBC,UAAW,oBAEbC,GAAI,CACF,wBAAyB,CACvBvB,SAAU,WACVwB,MAAO,EACPC,QAAS,EACTC,cAAe,OAEf,UAAW,CACTC,QAAS,KACT3B,SAAU,WACVwB,MAAO,EACPI,WACE,gEACFC,aAAc,eAKnBjC,EACCC,EAAAA,eAAqBD,GACnBA,EAEAC,EAAAA,cAACiC,EAAAA,EAAW,CAAClC,MAAOA,EAA2BmC,IAAKvC,IAEpD,KACHE,GACCG,EAAAA,cAACmC,EAAAA,GAAG,CACFhC,SAAS,WACTiC,MAAO,EACPC,IAAK,EACL1B,EAAG,EACHJ,QAAQ,OACRE,eAAe,MACf6B,EAAG,GACHC,EAAG,GACHlB,GAAG,cACHmB,SAAS,oCAETxC,EAAAA,cAACyC,EAAAA,IAAyB,CAAClC,QAAQ,WAGvCP,EAAAA,cAACmC,EAAAA,GAAG,KACFnC,EAAAA,cAAC0C,EAAAA,EAAO,CAACC,KAAK,MAAMhD,GACpBK,EAAAA,cAAC4C,EAAAA,EAAI,CAACC,SAAS,KAAKC,UAAU,YAC3BC,EAAAA,EAAAA,IAAiBjD,KAGtBE,EAAAA,cAAC4C,EAAAA,EAAI,KAAC,0CAGZ,C,sOCzDA,MAAMI,EAAmB,yCAEV,SAASC,EAAUvD,GAChC,MAAM,KAAEwD,GAASxD,GAEVyD,EAAQC,IAAQC,EAAAA,EAAAA,GACrBH,EAAKI,WAAWC,OAGlB,OACEvD,EAAAA,cAACwD,EAAAA,EAAU,KACTxD,EAAAA,cAACyD,EAAAA,GAAQ,CACP9D,MAAM,WACN+D,KAAMV,IAERhD,EAAAA,cAAC2D,EAAAA,EAAS,CACRC,GAAI,CAAEvD,KAAM,IAAKwD,GAAI,MACrBC,GAAI,CAAEzD,KAAM,IAAKC,GAAI,KACrByD,KAAK,eACLxD,QAAQ,OACRyD,SAAS,SACTtD,IAAK,CAAEL,KAAM,IAAKC,GAAI,MAEtBN,EAAAA,cAAC0C,EAAAA,EAAO,CAACC,KAAK,OAAM,YACpB3C,EAAAA,cAACiE,EAAAA,GAAI,CAAC1D,QAAQ,OAAOC,QAAQ,SAASE,IAAK,GACxCyC,EAAOe,KAAKC,IAAO,IAAAC,EAAAC,EAAA,OAClBrE,EAAAA,cAACsE,EAAAA,GAAQ,CAACC,IAAKJ,EAAQK,KACrBxE,EAAAA,cAACP,EAAAA,EAAW,CACVE,MAAOwE,EAAQM,KACf7E,IAAK,IAAIuE,EAAQK,MACjB1E,OAAoB,QAAbsE,EAAAD,EAAQrE,aAAK,IAAAsE,OAAA,EAAbA,EAAeF,IAAIQ,EAAAA,MAAyB,GACnD3E,OAAO4E,EAAAA,EAAAA,GAAqB,QAAbN,EAACF,EAAQS,YAAI,IAAAP,OAAA,EAAZA,EAAcQ,OAEvB,KAGf7E,EAAAA,cAAC8E,EAAAA,EAAO,CAACC,YAAY,YAAYpC,KAAK,KAAKqC,YAAY,eACvDhF,EAAAA,cAAC0C,EAAAA,EAAO,CAACC,KAAK,OAAM,QACpB3C,EAAAA,cAACiE,EAAAA,GAAI,CACH1D,QAAQ,OACRG,IAAK,CAAEL,KAAM,EAAGC,GAAI,GACpB2E,oBAAqB,CAAE5E,KAAM,MAAOC,GAAI,YAEvC8C,EAAKc,KAAKC,IAAO,IAAAe,EAAAC,EAAA,OAChBnF,EAAAA,cAACsE,EAAAA,GAAQ,CAACC,IAAKJ,EAAQK,KACrBxE,EAAAA,cAACP,EAAAA,EAAW,CACVE,MAAOwE,EAAQM,KACf7E,IAAK,IAAIuE,EAAQK,MACjB1E,OAAoB,QAAboF,EAAAf,EAAQrE,aAAK,IAAAoF,OAAA,EAAbA,EAAehB,IAAIQ,EAAAA,MAAyB,GACnD3E,OAAO4E,EAAAA,EAAAA,GAAqB,QAAbQ,EAAChB,EAAQS,YAAI,IAAAO,OAAA,EAAZA,EAAcN,OAEvB,IAEb7E,EAAAA,cAACsE,EAAAA,GAAQ,KACPtE,EAAAA,cAACP,EAAAA,EAAW,CACVE,MAAO,oBACPC,IAAI,6BACJE,MAAO,EACL4E,EAAAA,EAAAA,IAAqB,yBACrBA,EAAAA,EAAAA,IAAqB,yBAEvB3E,MACEC,EAAAA,cAACoF,EAAAA,EAAW,CACVP,IAAI,8CACJ3C,IAAI,qBAAoBmD,YAAAC,EAAA,SAG5BzF,YAAU,KAGdG,EAAAA,cAACsE,EAAAA,GAAQ,KACPtE,EAAAA,cAACP,EAAAA,EAAW,CACVE,MAAO,oBACPC,IAAI,6BACJE,MAAO,EACL4E,EAAAA,EAAAA,IAAqB,yBACrBA,EAAAA,EAAAA,IAAqB,yBAEvB3E,MACEC,EAAAA,cAACoF,EAAAA,EAAW,CACVP,IAAI,8CACJ3C,IAAI,qBAAoBmD,YAAAC,EAAA,SAG5BzF,YAAU,KAGdG,EAAAA,cAACsE,EAAAA,GAAQ,KACPtE,EAAAA,cAACP,EAAAA,EAAW,CACVE,MAAO,oBACPC,IAAI,6BACJE,MAAO,EAAC4E,EAAAA,EAAAA,IAAqB,yBAC7B3E,MACEC,EAAAA,cAACoF,EAAAA,EAAW,CACVP,IAAI,8CACJ3C,IAAI,qBAAoBmD,YAAAC,EAAA,QAG5BzF,YAAU,KAGdG,EAAAA,cAACsE,EAAAA,GAAQ,KACPtE,EAAAA,cAACP,EAAAA,EAAW,CACVE,MAAO,oBACPC,IAAI,6BACJE,MAAO,EAAC4E,EAAAA,EAAAA,IAAqB,yBAC7B3E,MACEC,EAAAA,cAACoF,EAAAA,EAAW,CACVP,IAAI,8CACJ3C,IAAI,qBAAoBmD,YAAAC,EAAA,SAG5BzF,YAAU,OAOxB,CAEO,MAsBM0F,EAAeA,IAAMvF,EAAAA,cAACwF,EAAAA,EAAG,CAAC7F,MAAM,WAAW8F,YAAazC,G,2GCjK9D,SAAS0B,EAAqBgB,GAEnC,GAAmB,iBAARA,EACT,OAAO,IAAIC,KAAK,WAqBlB,MAAMC,EAAiBF,EAAIG,MAAM,kCAC3BC,EAAWJ,EAAIG,MAAM,yCAE3B,GAAID,GAAkBE,EAAU,CAC9B,MAAMC,EAAO,IAAIJ,KAAKD,GAEtB,GAAIM,MAAMD,EAAKE,WAAY,OAAOF,EAClC,MAAMG,EAASH,EAAKI,oBAEpB,OADAJ,EAAKK,QAAQL,EAAKE,UAAqB,GAATC,EAAc,KACrCH,CACT,CAGE,OAAO,IAAIJ,KAAKD,EAAIW,QAAQ,wBAAyB,MAEzD,CAyBO,SAAStD,EAAiBjD,GAC/B,MAAMwG,EAAQxG,EAAMyG,QAClB,CAACC,EAAKT,KAEJ,MAAMU,EAAIV,EAAKW,cACTC,EAAIZ,EAAKa,WAETC,EAASL,EAAIC,IAAM,CAAC,EACpBK,EAASD,EAAOF,IAAM,GAE5B,MAAO,IACFH,EACH,CAACC,GAAI,IACAI,EACH,CAACF,GAAG,GAAFI,QAAAC,EAAAA,EAAAA,GAAOF,GAAM,CAAEf,KAEpB,GAEH,CAAC,GAGH,OAAOkB,OAAOC,QAAQZ,GACnBpC,KAAIiD,IAAkB,IAAhBV,EAAGI,GAAOM,EAKf,MAAO,GAJQF,OAAOC,QAAQL,GAAQ3C,KAAIkD,IAAiB,IAAf,CAAEN,GAAOM,EACnD,MAAMC,EAAOP,EAAO5C,KAAKoD,IAAMC,EAAAA,EAAAA,IAAOD,EAAG,QAAOE,KAAK,OACrD,MAAO,IAAGD,EAAAA,EAAAA,IAAOT,EAAO,GAAI,WAAWO,GAAM,IAE9BG,KAAK,WAAWf,GAAG,IAErCe,KAAK,MACV,C,wGCnFO,SAASC,EAAUC,EAAUC,GAIlC,QAH2B,EAAAC,EAAA,GAAWF,MACV,EAAAE,EAAA,GAAWD,EAGzC,CCdO,SAASE,EAAQ9B,GACtB,OAAO0B,EAAU1B,GAAM,EAAA+B,EAAA,GAAa/B,GACtC,CAGA,I,UCNO,SAASgC,EAAShC,GACvB,QAAQ,EAAAiC,EAAA,GAAOjC,GAAQJ,KAAKsC,KAC9B,CAGA,I,WCtBO,SAAS5E,EACd6E,GAEA,OAAOC,EAAAA,EAAAA,UACL,IACED,EAAS3B,QACP,CAACC,EAAKrC,KAAa,IAADC,EAKhB,OAJ6B,QAAhBA,EAAGD,EAAQrE,aAAK,IAAAsE,OAAA,EAAbA,EAAegE,MAAMrC,IACnC,MAAMuB,GAAI5C,EAAAA,EAAAA,IAAqBqB,GAC/B,OAAO8B,EAAQP,IAAMS,EAAST,EAAE,KAGzB,CAAC,GAADP,QAAAC,EAAAA,EAAAA,GAAKR,EAAI,IAAE,CAAErC,IAAUqC,EAAI,IAE3B,CAACA,EAAI,GAAG,GAADO,QAAAC,EAAAA,EAAAA,GAAMR,EAAI,IAAE,CAAErC,IAC9B,GAEF,CAAC,GAAI,MAET,CAAC+D,GAEL,C,uECMO,SAASJ,EAAa/B,GAC3B,OAAO,OAAcA,EAAMJ,KAAKsC,MAClC,C","sources":["webpack://satsummit.io/./src/components/editions/edition-card.tsx","webpack://satsummit.io/./src/pages/editions.tsx","webpack://satsummit.io/./src/utils/date.ts","webpack://satsummit.io/./node_modules/date-fns/isSameDay.mjs","webpack://satsummit.io/./node_modules/date-fns/isToday.mjs","webpack://satsummit.io/./node_modules/date-fns/isFuture.mjs","webpack://satsummit.io/./src/utils/use-future-past-edition.ts","webpack://satsummit.io/./node_modules/date-fns/constructNow.mjs"],"sourcesContent":["import React from 'react';\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\nimport { Box, Heading, Text } from '@chakra-ui/react';\nimport { CollecticonExpandTopRight } from '@devseed-ui/collecticons-chakra';\n\nimport SmartLink from '$components/smart-link';\n\nimport { multiDateDisplay } from '$utils/date';\n\nimport cloudSmallUrl from '$images/banner/banner--cloud-small@2x.png';\n\ninterface EditionCardProps {\n  title: string;\n  url: string;\n  isExternal?: boolean;\n  dates: Date[];\n  image?: React.ReactElement | IGatsbyImageData;\n}\n\nexport function EditionCard(props: EditionCardProps) {\n  const { title, url, isExternal, dates, image } = props;\n\n  return (\n    <SmartLink\n      to={url}\n      position='relative'\n      minH={{ base: '18rem', md: '24rem' }}\n      display='flex'\n      flexDir='column'\n      justifyContent='end'\n      gap={4}\n      p={{ base: 4, md: 8 }}\n      overflow='hidden'\n      borderRadius='sm'\n      color='surface.500'\n      bgColor='primary.800'\n      bgImage={`url('${cloudSmallUrl}')`}\n      bgRepeat='no-repeat'\n      bgSize='auto 70%'\n      bgPosition='calc(100% + 8rem) bottom'\n      // Override background if image is provided.\n      bg={image ? 'none' : undefined}\n      _hover={{\n        textDecoration: 'none',\n        transform: 'translateY(-2px)'\n      }}\n      sx={{\n        '.gatsby-image-wrapper': {\n          position: 'absolute',\n          inset: 0,\n          zIndex: -1,\n          pointerEvents: 'none',\n\n          '&:after': {\n            content: '\"\"',\n            position: 'absolute',\n            inset: 0,\n            background:\n              'linear-gradient(180deg, rgba(13, 22, 88, 0) 0%, #0D1658 100%)',\n            mixBlendMode: 'multiply'\n          }\n        }\n      }}\n    >\n      {image ? (\n        React.isValidElement(image) ? (\n          image\n        ) : (\n          <GatsbyImage image={image as IGatsbyImageData} alt={title} />\n        )\n      ) : null}\n      {isExternal && (\n        <Box\n          position='absolute'\n          right={0}\n          top={0}\n          p={4}\n          display='flex'\n          justifyContent='end'\n          w={20}\n          h={20}\n          bg='primary.500'\n          clipPath='polygon(0 0, 100% 100%, 100% 0);'\n        >\n          <CollecticonExpandTopRight display='block' />\n        </Box>\n      )}\n      <Box>\n        <Heading size='xl'>{title}</Heading>\n        <Text fontSize='sm' fontStyle='initial'>\n          {multiDateDisplay(dates)}\n        </Text>\n      </Box>\n      <Text>Satellite data for global development.</Text>\n    </SmartLink>\n  );\n}\n","import React from 'react';\nimport { PageProps, graphql, type HeadFC } from 'gatsby';\nimport {\n  getImage,\n  IGatsbyImageData,\n  StaticImage\n} from 'gatsby-plugin-image';\nimport {\n  Container,\n  Divider,\n  Heading,\n  List,\n  ListItem,\n} from '@chakra-ui/react';\n\n\nimport PageLayout from '$components/page-layout';\nimport Seo from '$components/seo';\nimport { PageHero } from '$components/page-hero';\nimport { utcString2userTzDate } from '$utils/date';\nimport { useFuturePastEditions } from '$utils/use-future-past-edition';\nimport { EditionCard } from '$components/editions/edition-card';\n\ninterface PageQueryEdition {\n  name: string;\n  cId: string;\n  dates?: string[];\n  card: {\n    src: IGatsbyImageData;\n  };\n}\n\ninterface PageQuery {\n  allEdition: {\n    nodes: PageQueryEdition[];\n  };\n  site: { siteMetadata: { eventDates: string[] } };\n}\n\nconst PAGE_DESCRIPTION = 'Nine years of SatSummit. And counting.';\n\nexport default function IndexPage(props: PageProps<PageQuery>) {\n  const { data } = props;\n\n  const [future, past] = useFuturePastEditions<PageQueryEdition>(\n    data.allEdition.nodes\n  );\n\n  return (\n    <PageLayout>\n      <PageHero\n        title='Editions'\n        lead={PAGE_DESCRIPTION}\n      />\n      <Container\n        py={{ base: '8', lg: '16' }}\n        px={{ base: '4', md: '8' }}\n        maxW='container.xl'\n        display='flex'\n        flexFlow='column'\n        gap={{ base: '4', md: '8' }}\n      >\n        <Heading size='2xl'>Upcoming</Heading>\n        <List display='flex' flexDir='column' gap={4}>\n          {future.map((edition) => (\n            <ListItem key={edition.cId}>\n              <EditionCard\n                title={edition.name}\n                url={`/${edition.cId}`}\n                dates={edition.dates?.map(utcString2userTzDate) || []}\n                image={getImage(edition.card?.src)}\n              />\n            </ListItem>\n          ))}\n        </List>\n        <Divider borderColor='base.200a' size='md' orientation='horizontal' />\n        <Heading size='2xl'>Past</Heading>\n        <List\n          display='grid'\n          gap={{ base: 4, md: 8 }}\n          gridTemplateColumns={{ base: '1fr', md: '1fr 1fr' }}\n        >\n          {past.map((edition) => (\n            <ListItem key={edition.cId}>\n              <EditionCard\n                title={edition.name}\n                url={`/${edition.cId}`}\n                dates={edition.dates?.map(utcString2userTzDate) || []}\n                image={getImage(edition.card?.src)}\n              />\n            </ListItem>\n          ))}\n          <ListItem>\n            <EditionCard\n              title={`Washington DC '22`}\n              url='https://2022.satsummit.io/'\n              dates={[\n                utcString2userTzDate('2022-09-28T00:00:00Z'),\n                utcString2userTzDate('2022-09-29T00:00:00Z')\n              ]}\n              image={\n                <StaticImage\n                  src='../images/editions/2022-washington-card.png'\n                  alt='Washington DC 2022'\n                />\n              }\n              isExternal\n            />\n          </ListItem>\n          <ListItem>\n            <EditionCard\n              title={`Washington DC '18`}\n              url='https://2018.satsummit.io/'\n              dates={[\n                utcString2userTzDate('2018-09-19T00:00:00Z'),\n                utcString2userTzDate('2018-09-20T00:00:00Z')\n              ]}\n              image={\n                <StaticImage\n                  src='../images/editions/2018-washington-card.png'\n                  alt='Washington DC 2018'\n                />\n              }\n              isExternal\n            />\n          </ListItem>\n          <ListItem>\n            <EditionCard\n              title={`Washington DC '17`}\n              url='https://2017.satsummit.io/'\n              dates={[utcString2userTzDate('2017-01-31T00:00:00Z')]}\n              image={\n                <StaticImage\n                  src='../images/editions/2017-washington-card.png'\n                  alt='Washington DC 2017'\n                />\n              }\n              isExternal\n            />\n          </ListItem>\n          <ListItem>\n            <EditionCard\n              title={`Washington DC '15`}\n              url='https://2015.satsummit.io/'\n              dates={[utcString2userTzDate('2015-11-09T00:00:00Z')]}\n              image={\n                <StaticImage\n                  src='../images/editions/2015-washington-card.png'\n                  alt='Washington DC 2015'\n                />\n              }\n              isExternal\n            />\n          </ListItem>\n        </List>\n      </Container>\n    </PageLayout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query {\n    allEdition(sort: { dates: DESC }) {\n      nodes {\n        name\n        cId\n        dates\n        card {\n          src {\n            childImageSharp {\n              gatsbyImageData(\n                layout: FULL_WIDTH\n                placeholder: BLURRED\n              )\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const Head: HeadFC = () => <Seo title='Editions' description={PAGE_DESCRIPTION} />;\n","import { format } from 'date-fns';\n\n/**\n * Create a date which matches the input date offsetting the timezone to match\n * the user's.\n * If the user is in UTC-5 time and the date string is in UTC the date will be\n * constructed disregarding the input date's timezone.\n * Ex:\n * input: 2019-01-01T00:00:00Z\n * normal output: 2018-12-31T19:00:00 -05:00\n * utcDate output: 2019-01-01T00:00:00 -05:00\n *\n * Basically it parses the date ignoring the timezone and treats it as if the\n * date is already in the user's Tz.\n * Times I had timezone related bugs and this fn saved me: 8\n *\n * Reverse function of userTzDate2utcString()\n *\n * @param {string} str Date String\n * @returns Date\n */\nexport function utcString2userTzDate(str?: string | null) {\n  // Always return a Date even if invalid\n  if (typeof str !== 'string') {\n    return new Date('invalid');\n  }\n\n  // The date should always be in the user's TZ but the input string affects\n  // how the date is constructed.\n  // An input string of only year or with `-` (2020-01 | 2020-1-1) will be\n  // considered to be in ISO format, meaning that the user date will be this\n  // date +- the TZ offset. For example:\n  // 2020-01-01\n  //   Tue Dec 31 2019 19:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 01:00:00 GMT+0100 (Central European Time)\n  //\n  // whereas 2020/01/01\n  //   Wed Jan 01 2020 00:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 00:00:00 GMT+0100 (Central European Time)\n  // and if converted to ISO\n  //   2020-01-01T05:00:00.000Z\n  //   2020-01-01T01:00:00.000Z\n  //\n  // The code below ensures that all dates behave the same.\n  //\n  const isoYearOrMonth = str.match(/^([0-9]{4})(?:-([0-9]{1,2}))?$/);\n  const isoMatch = str.match(/^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})/);\n\n  if (isoYearOrMonth || isoMatch) {\n    const date = new Date(str);\n    // If the date is not valid, return it and be done.\n    if (isNaN(date.getTime())) return date;\n    const offset = date.getTimezoneOffset();\n    date.setTime(date.getTime() + offset * 60 * 1000);\n    return date;\n  } else {\n    // For the full date view Date does a good job, except with the ordinal\n    // numbers. Remove those from the date before parsing.\n    return new Date(str.replace(/([0-9])(st|nd|rd|th)/g, '$1'));\n  }\n}\n\n/**\n * Converts the date to a ISO string offsetting the timezone.\n *\n * Basically it coverts the date to a string ignoring the timezone and treating\n * it as if the date is already in UTC.\n *\n * Reverse function of utcString2userTzDate()\n *\n * @param date The Date\n * @returns string\n */\nexport function userTzDate2utcString(date: Date) {\n  const tz = date.getTimezoneOffset();\n  const d = new Date(date.getTime() - tz * 60000);\n  return d.toISOString();\n}\n\n// Creates a human readable string of dates without much repetition.\n// Groups by year and month, then lists the days.\n// Example:\n// The dates: [2022-09-28, 2022-09-29, 2022-10-01, 2022-01-01]\n// Will be displayed as:\n// September 28 & 29 & October 01, 2022 & January 01, 2022\nexport function multiDateDisplay(dates: Date[]) {\n  const group = dates.reduce(\n    (acc, date) => {\n      // Group by month and year\n      const y = date.getFullYear();\n      const m = date.getMonth();\n\n      const yGroup = acc[y] || {};\n      const mGroup = yGroup[m] || [];\n\n      return {\n        ...acc,\n        [y]: {\n          ...yGroup,\n          [m]: [...mGroup, date]\n        }\n      };\n    },\n    {} as Record<number, Record<number, Date[]>>\n  );\n\n  return Object.entries(group)\n    .map(([y, yGroup]) => {\n      const months = Object.entries(yGroup).map(([, mGroup]) => {\n        const days = mGroup.map((d) => format(d, 'dd')).join(' & ');\n        return `${format(mGroup[0], 'MMMM')} ${days}`;\n      });\n      return `${months.join(' & ')}, ${y}`;\n    })\n    .join(' & ');\n}","import { startOfDay } from \"./startOfDay.mjs\";\n\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day (and year and month)?\n *\n * @description\n * Are the given dates in the same day (and year and month)?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to check\n * @param dateRight - The second date to check\n\n * @returns The dates are in the same day (and year and month)\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n *\n * @example\n * // Are 4 September and 4 October in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))\n * //=> false\n *\n * @example\n * // Are 4 September, 2014 and 4 September, 2015 in the same day?\n * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))\n * //=> false\n */\nexport function isSameDay(dateLeft, dateRight) {\n  const dateLeftStartOfDay = startOfDay(dateLeft);\n  const dateRightStartOfDay = startOfDay(dateRight);\n\n  return +dateLeftStartOfDay === +dateRightStartOfDay;\n}\n\n// Fallback for modularized imports:\nexport default isSameDay;\n","import { constructNow } from \"./constructNow.mjs\";\nimport { isSameDay } from \"./isSameDay.mjs\";\n\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is today\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\nexport function isToday(date) {\n  return isSameDay(date, constructNow(date));\n}\n\n// Fallback for modularized imports:\nexport default isToday;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isFuture\n * @category Common Helpers\n * @summary Is the given date in the future?\n * @pure false\n *\n * @description\n * Is the given date in the future?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is in the future\n *\n * @example\n * // If today is 6 October 2014, is 31 December 2014 in the future?\n * const result = isFuture(new Date(2014, 11, 31))\n * //=> true\n */\nexport function isFuture(date) {\n  return +toDate(date) > Date.now();\n}\n\n// Fallback for modularized imports:\nexport default isFuture;\n","import { useMemo } from 'react';\nimport { isFuture, isToday } from 'date-fns';\n\nimport { utcString2userTzDate } from './date';\n\nexport function useFuturePastEditions<T extends { dates?: string[] }>(\n  editions: T[]\n) {\n  return useMemo(\n    () =>\n      editions.reduce(\n        (acc, edition) => {\n          const current = edition.dates?.some((date) => {\n            const d = utcString2userTzDate(date);\n            return isToday(d) || isFuture(d);\n          });\n          if (current) {\n            return [[...acc[0], edition], acc[1]];\n          } else {\n            return [acc[0], [...acc[1], edition]];\n          }\n        },\n        [[], []] as T[][]\n      ),\n    [editions]\n  );\n}\n","import { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateType | number | string,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n"],"names":["EditionCard","props","title","url","isExternal","dates","image","React","SmartLink","to","position","minH","base","md","display","flexDir","justifyContent","gap","p","overflow","borderRadius","color","bgColor","bgImage","cloudSmallUrl","bgRepeat","bgSize","bgPosition","bg","undefined","_hover","textDecoration","transform","sx","inset","zIndex","pointerEvents","content","background","mixBlendMode","GatsbyImage","alt","Box","right","top","w","h","clipPath","CollecticonExpandTopRight","Heading","size","Text","fontSize","fontStyle","multiDateDisplay","PAGE_DESCRIPTION","IndexPage","data","future","past","useFuturePastEditions","allEdition","nodes","PageLayout","PageHero","lead","Container","py","lg","px","maxW","flexFlow","List","map","edition","_edition$dates","_edition$card","ListItem","key","cId","name","utcString2userTzDate","getImage","card","src","Divider","borderColor","orientation","gridTemplateColumns","_edition$dates2","_edition$card2","StaticImage","__imageData","require","Head","Seo","description","str","Date","isoYearOrMonth","match","isoMatch","date","isNaN","getTime","offset","getTimezoneOffset","setTime","replace","group","reduce","acc","y","getFullYear","m","getMonth","yGroup","mGroup","concat","_toConsumableArray","Object","entries","_ref","_ref2","days","d","format","join","isSameDay","dateLeft","dateRight","startOfDay","isToday","constructNow","isFuture","toDate","now","editions","useMemo","some"],"sourceRoot":""}