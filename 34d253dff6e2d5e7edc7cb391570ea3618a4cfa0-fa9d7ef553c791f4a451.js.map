{"version":3,"file":"34d253dff6e2d5e7edc7cb391570ea3618a4cfa0-fa9d7ef553c791f4a451.js","mappings":"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","sources":["webpack://satsummit.io/./src/components/page-hero.tsx","webpack://satsummit.io/./node_modules/date-fns/differenceInCalendarDays.mjs","webpack://satsummit.io/./node_modules/date-fns/startOfYear.mjs","webpack://satsummit.io/./node_modules/date-fns/getDayOfYear.mjs","webpack://satsummit.io/./node_modules/date-fns/_lib/addLeadingZeros.mjs","webpack://satsummit.io/./node_modules/date-fns/_lib/format/lightFormatters.mjs","webpack://satsummit.io/./node_modules/date-fns/_lib/format/formatters.mjs","webpack://satsummit.io/./node_modules/date-fns/isDate.mjs","webpack://satsummit.io/./node_modules/date-fns/isValid.mjs","webpack://satsummit.io/./node_modules/date-fns/format.mjs","webpack://satsummit.io/./node_modules/date-fns/startOfDay.mjs"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  Container,\n  ContainerProps,\n  Divider,\n  Flex,\n  Heading,\n  Text\n} from '@chakra-ui/react';\n\nimport cloudSmallUrl from '$images/banner/banner--cloud-small@2x.png';\nimport SmartLink from './smart-link';\nimport { useEditionContext } from '$context/edition';\n\ninterface PageHeroProps\n  extends PageHeroHeadlineProps,\n    Omit<PageHeroFoundationProps, 'children'> {\n  lead?: string;\n}\n\nconst heroBg = `url('${cloudSmallUrl}') calc(100% + 20rem) bottom / auto 16rem no-repeat`;\n\nexport function PageHero(props: PageHeroProps) {\n  const { title, lead, parent, ...passthrough } = props;\n\n  return (\n    <PageHeroFoundation {...passthrough}>\n      <Flex flexFlow='column' gap='4'>\n        <PageHeroHeadline title={title} parent={parent} />\n        {lead && (\n          <Text textStyle='lead.lg' maxW='container.sm'>\n            {lead}\n          </Text>\n        )}\n      </Flex>\n    </PageHeroFoundation>\n  );\n}\n\ninterface PageHeroFoundationProps {\n  children: React.ReactNode;\n  wrapperProps?: BoxProps;\n  innerProps?: ContainerProps;\n}\n\nexport function PageHeroFoundation(props: PageHeroFoundationProps) {\n  return (\n    <Box\n      background='primary.500'\n      px={{ base: '4', md: '8' }}\n      py={{ base: '8', lg: '16' }}\n      position='relative'\n      {...props.wrapperProps}\n      _after={{\n        content: '\"\"',\n        position: 'absolute',\n        inset: 0,\n        background: heroBg,\n        zIndex: 100,\n        pointerEvents: 'none',\n        display: { base: 'none', lg: 'block' }\n      }}\n    >\n      <Container\n        maxW='container.xl'\n        color='white'\n        display='flex'\n        alignItems='center'\n        p='0'\n        {...props.innerProps}\n      >\n        {props.children}\n      </Container>\n    </Box>\n  );\n}\n\ninterface PageHeroHeadlineProps {\n  title: string;\n  parent?: {\n    title: string;\n    url: string;\n  };\n}\n\nexport function PageHeroHeadline(props: PageHeroHeadlineProps) {\n  const { title, parent } = props;\n\n  const { edition, editionCId } = useEditionContext();\n\n  return (\n    <Box>\n      <Flex alignItems='center' gap={4}>\n        {edition && (\n          <Heading\n            as={SmartLink}\n            to={`/${editionCId}`}\n            color='surface.500'\n            size='md'\n          >\n            {edition.name}\n          </Heading>\n        )}\n        {parent && edition && (\n          <Divider\n            borderColor='surface.300a'\n            size='xs'\n            h='4'\n            orientation='vertical'\n          />\n        )}\n        {parent && (\n          <Heading as={SmartLink} to={parent.url} color='surface.500' size='md'>\n            {parent.title}\n          </Heading>\n        )}\n      </Flex>\n      <Heading size='4xl' as='h1'>\n        {title}\n      </Heading>\n    </Box>\n  );\n}\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n"],"names":["heroBg","cloudSmallUrl","PageHero","props","title","lead","parent","passthrough","React","PageHeroFoundation","Flex","flexFlow","gap","PageHeroHeadline","Text","textStyle","maxW","Box","Object","assign","background","px","base","md","py","lg","position","wrapperProps","_after","content","inset","zIndex","pointerEvents","display","Container","color","alignItems","p","innerProps","children","edition","editionCId","useEditionContext","Heading","as","SmartLink","to","size","name","Divider","borderColor","h","orientation","url","differenceInCalendarDays","dateLeft","dateRight","startOfDayLeft","startOfDay","startOfDayRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","startOfYear","date","cleanDate","toDate","_date","constructFrom","setFullYear","getFullYear","setHours","getDayOfYear","addLeadingZeros","number","targetLength","abs","toString","padStart","lightFormatters","y","token","signedYear","year","length","M","month","getMonth","String","d","getDate","a","dayPeriodEnumValue","getHours","toUpperCase","H","m","getMinutes","s","getSeconds","S","numberOfDigits","milliseconds","getMilliseconds","trunc","pow","dayPeriodEnum","formatters","G","localize","era","width","ordinalNumber","unit","Y","options","signedWeekYear","getWeekYear","weekYear","R","getISOWeekYear","u","Q","quarter","ceil","context","q","L","w","week","getWeek","I","isoWeek","getISOWeek","D","dayOfYear","E","dayOfWeek","getDay","day","e","localDayOfWeek","weekStartsOn","c","i","isoDayOfWeek","dayPeriod","toLowerCase","b","hours","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","getTime","T","offset","delimiter","sign","absOffset","minutes","isDate","value","Date","prototype","call","isValid","isNaN","Number","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","format","formatStr","defaultOptions","locale","firstWeekContainsDate","originalDate","RangeError","parts","match","map","substring","firstCharacter","longFormatter","longFormatters","formatLong","join","isToken","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","formatter","input","matched","replace"],"sourceRoot":""}