{"version":3,"file":"component---src-pages-tickets-tsx-f3ae607edcf42aff7f8b.js","mappings":"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","sources":["webpack://satsummit.io/./src/pages/tickets.tsx","webpack://satsummit.io/./src/utils/date.ts"],"sourcesContent":["import * as React from 'react';\nimport { PageProps, graphql, type HeadFC } from 'gatsby';\nimport {\n  Box,\n  Button,\n  Container,\n  Flex,\n  Heading,\n  List,\n  ListItem,\n  Text\n} from '@chakra-ui/react';\nimport { CollecticonExpandTopRight } from '@devseed-ui/collecticons-chakra';\n\nimport PageLayout from '$components/page-layout';\nimport Seo from '$components/seo';\nimport SmartLink from '$components/smart-link';\nimport { PageHero } from '$components/page-hero';\n\nimport { multiDateDisplay, utcString2userTzDate } from '$utils/date';\n\ninterface PageQuery {\n  allEdition: {\n    nodes: {\n      name: string;\n      cId: string;\n      dates: string[];\n      tickets?: {\n        url: string;\n        description: string;\n        status: string;\n      };\n    }[];\n  };\n  site: { siteMetadata: { eventDates: string[] } };\n}\n\nexport default function IndexPage(props: PageProps<PageQuery>) {\n  const { data } = props;\n\n  return (\n    <PageLayout>\n      <PageHero title='Tickets' lead=\"Get'em while they're hot\" />\n      <Container\n        py={{ base: '8', lg: '16' }}\n        px={{ base: '4', md: '8' }}\n        maxW='container.lg'\n        display='flex'\n        flexFlow='column'\n        gap={{ base: '4', md: '8' }}\n      >\n        <List>\n          {data.allEdition.nodes\n            .filter((e) => e.dates?.length)\n            .map((edition) => (\n              <ListItem\n                key={edition.cId}\n                _notFirst={{\n                  borderTop: '8px solid',\n                  borderTopColor: 'base.200a'\n                }}\n              >\n                <EditionEntry edition={edition} />\n              </ListItem>\n            ))}\n        </List>\n      </Container>\n    </PageLayout>\n  );\n}\n\nfunction getEventStatus(edition: PageQuery['allEdition']['nodes'][0]) {\n  const lastDate = utcString2userTzDate(\n    edition.dates[edition.dates.length - 1]\n  );\n\n  if (lastDate < new Date()) return 'finished';\n\n  const status = edition.tickets?.status;\n\n  if (status === 'sold-out') return 'sold-out';\n\n  if (status === 'live' && edition.tickets?.url) return 'live';\n\n  return 'coming-soon';\n}\n\nfunction EditionEntry(props: { edition: PageQuery['allEdition']['nodes'][0] }) {\n  const { edition } = props;\n\n  const status = getEventStatus(edition);\n\n  return (\n    <Flex\n      py={8}\n      gap={{ base: 4, md: 8 }}\n      opacity={['finished', 'sold-out'].includes(status) ? 0.4 : 1}\n      direction={{ base: 'column', md: 'row' }}\n    >\n      <Box width={{ base: 'auto', md: '14rem', lg: '16rem' }}>\n        <Heading as='h2' size='2xl'>\n          {edition.name}\n        </Heading>\n        <Heading as='p' size='lg'>\n          {multiDateDisplay(edition.dates.map((d) => utcString2userTzDate(d)))}\n        </Heading>\n      </Box>\n      {edition.tickets?.description && (\n        <Text\n          maxW='30rem'\n          sx={{\n            a: {\n              color: 'primary.500',\n              _hover: {\n                textDecoration: 'underline'\n              }\n            }\n          }}\n          dangerouslySetInnerHTML={{ __html: edition.tickets.description }}\n        />\n      )}\n      <Flex\n        width={{ base: 'auto', md: '7rem', lg: '9rem' }}\n        ml='auto'\n        justifyContent={{ base: 'left', md: 'right' }}\n      >\n        {status === 'finished' ? (\n          <Heading as='p' size='sm'>\n            Event has passed\n          </Heading>\n        ) : status === 'sold-out' ? (\n          <Heading as='p' size='sm'>\n            Sold out\n          </Heading>\n        ) : status === 'live' ? (\n          <Button\n            as={SmartLink}\n            to={edition.tickets!.url}\n            colorScheme='primary'\n            borderRadius='xs'\n            size='sm'\n            rightIcon={<CollecticonExpandTopRight />}\n          >\n            Book ticket\n          </Button>\n        ) : (\n          <Heading as='p' size='sm'>\n            Coming soon\n          </Heading>\n        )}\n      </Flex>\n    </Flex>\n  );\n}\n\nexport const pageQuery = graphql`\n  query {\n    allEdition(\n      sort: { dates: DESC }\n      filter: { tickets: { status: { ne: \"hide\" } } }\n    ) {\n      nodes {\n        cId\n        name\n        dates\n        tickets {\n          url\n          description\n          status\n        }\n      }\n    }\n  }\n`;\n\nexport const Head: HeadFC = () => (\n  <Seo title='Tickets' description='Get your SatSummit ticket.' />\n);\n","import { format } from 'date-fns';\n\n/**\n * Create a date which matches the input date offsetting the timezone to match\n * the user's.\n * If the user is in UTC-5 time and the date string is in UTC the date will be\n * constructed disregarding the input date's timezone.\n * Ex:\n * input: 2019-01-01T00:00:00Z\n * normal output: 2018-12-31T19:00:00 -05:00\n * utcDate output: 2019-01-01T00:00:00 -05:00\n *\n * Basically it parses the date ignoring the timezone and treats it as if the\n * date is already in the user's Tz.\n * Times I had timezone related bugs and this fn saved me: 8\n *\n * Reverse function of userTzDate2utcString()\n *\n * @param {string} str Date String\n * @returns Date\n */\nexport function utcString2userTzDate(str?: string | null) {\n  // Always return a Date even if invalid\n  if (typeof str !== 'string') {\n    return new Date('invalid');\n  }\n\n  // The date should always be in the user's TZ but the input string affects\n  // how the date is constructed.\n  // An input string of only year or with `-` (2020-01 | 2020-1-1) will be\n  // considered to be in ISO format, meaning that the user date will be this\n  // date +- the TZ offset. For example:\n  // 2020-01-01\n  //   Tue Dec 31 2019 19:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 01:00:00 GMT+0100 (Central European Time)\n  //\n  // whereas 2020/01/01\n  //   Wed Jan 01 2020 00:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 00:00:00 GMT+0100 (Central European Time)\n  // and if converted to ISO\n  //   2020-01-01T05:00:00.000Z\n  //   2020-01-01T01:00:00.000Z\n  //\n  // The code below ensures that all dates behave the same.\n  //\n  const isoYearOrMonth = str.match(/^([0-9]{4})(?:-([0-9]{1,2}))?$/);\n  const isoMatch = str.match(/^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})/);\n\n  if (isoYearOrMonth || isoMatch) {\n    const date = new Date(str);\n    // If the date is not valid, return it and be done.\n    if (isNaN(date.getTime())) return date;\n    const offset = date.getTimezoneOffset();\n    date.setTime(date.getTime() + offset * 60 * 1000);\n    return date;\n  } else {\n    // For the full date view Date does a good job, except with the ordinal\n    // numbers. Remove those from the date before parsing.\n    return new Date(str.replace(/([0-9])(st|nd|rd|th)/g, '$1'));\n  }\n}\n\n/**\n * Converts the date to a ISO string offsetting the timezone.\n *\n * Basically it coverts the date to a string ignoring the timezone and treating\n * it as if the date is already in UTC.\n *\n * Reverse function of utcString2userTzDate()\n *\n * @param date The Date\n * @returns string\n */\nexport function userTzDate2utcString(date: Date) {\n  const tz = date.getTimezoneOffset();\n  const d = new Date(date.getTime() - tz * 60000);\n  return d.toISOString();\n}\n\n// Creates a human readable string of dates without much repetition.\n// Groups by year and month, then lists the days.\n// Example:\n// The dates: [2022-09-28, 2022-09-29, 2022-10-01, 2022-01-01]\n// Will be displayed as:\n// September 28 & 29 & October 01, 2022 & January 01, 2022\nexport function multiDateDisplay(dates: Date[]) {\n  const group = dates.reduce(\n    (acc, date) => {\n      // Group by month and year\n      const y = date.getFullYear();\n      const m = date.getMonth();\n\n      const yGroup = acc[y] || {};\n      const mGroup = yGroup[m] || [];\n\n      return {\n        ...acc,\n        [y]: {\n          ...yGroup,\n          [m]: [...mGroup, date]\n        }\n      };\n    },\n    {} as Record<number, Record<number, Date[]>>\n  );\n\n  return Object.entries(group)\n    .map(([y, yGroup]) => {\n      const months = Object.entries(yGroup).map(([, mGroup]) => {\n        const days = mGroup.map((d) => format(d, 'dd')).join(' & ');\n        return `${format(mGroup[0], 'MMMM')} ${days}`;\n      });\n      return `${months.join(' & ')}, ${y}`;\n    })\n    .join(' & ');\n}"],"names":["IndexPage","props","data","React","PageLayout","PageHero","title","lead","Container","py","base","lg","px","md","maxW","display","flexFlow","gap","List","allEdition","nodes","filter","e","_e$dates","dates","length","map","edition","ListItem","key","cId","_notFirst","borderTop","borderTopColor","EditionEntry","_edition$tickets3","status","_edition$tickets","_edition$tickets2","utcString2userTzDate","Date","tickets","url","getEventStatus","Flex","opacity","includes","direction","Box","width","Heading","as","size","name","multiDateDisplay","d","description","Text","sx","a","color","_hover","textDecoration","dangerouslySetInnerHTML","__html","ml","justifyContent","Button","SmartLink","to","colorScheme","borderRadius","rightIcon","CollecticonExpandTopRight","Head","Seo","str","isoYearOrMonth","match","isoMatch","date","isNaN","getTime","offset","getTimezoneOffset","setTime","replace","group","reduce","acc","y","getFullYear","m","getMonth","yGroup","mGroup","concat","_toConsumableArray","Object","entries","_ref","_ref2","days","format","join"],"sourceRoot":""}