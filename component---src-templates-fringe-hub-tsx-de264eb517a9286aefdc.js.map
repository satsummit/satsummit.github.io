{"version":3,"file":"component---src-templates-fringe-hub-tsx-de264eb517a9286aefdc.js","mappings":"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","sources":["webpack://satsummit.io/./src/templates/fringe-hub.tsx","webpack://satsummit.io/./src/utils/date.ts"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { HeadProps, PageProps, graphql } from 'gatsby';\nimport { Global } from '@emotion/react';\nimport { format } from 'date-fns';\nimport {\n  Box,\n  Heading,\n  ListItem,\n  OrderedList,\n  useBreakpointValue\n} from '@chakra-ui/react';\nimport { Hug } from '@devseed-ui/hug-chakra';\n\nimport Seo from '$components/seo';\nimport PageLayout from '$components/page-layout';\nimport { AgendaEvent, EVENT_DISPLAY_DURATION } from '$components/agenda/event';\nimport { ChakraFade } from '$components/reveal';\nimport { parseEventDate } from '$utils/utils';\nimport { utcString2userTzDate } from '$utils/date';\nimport { PageHero } from '$components/page-hero';\n\ninterface AgendaEvent {\n  parent: {\n    body: string;\n  };\n  id: string;\n  cId: string;\n  title: string;\n  type: string;\n  date: string;\n  room: string;\n  people: Queries.EventPeople;\n}\n\ninterface FringePageQuery extends Queries.EditionContextualDataFragment {\n  allEvent: {\n    nodes: AgendaEvent[];\n  };\n}\n\nexport default function FringePage(props: PageProps<FringePageQuery>) {\n  const { allEvent, edition } = props.data;\n\n  // Create day and hour groups for the events.\n  const eventsTimeGroups = allEvent.nodes.reduce<\n    Record<string, Record<string, AgendaEvent[]>>\n  >((acc, event) => {\n    const date = parseEventDate(event.date);\n    const evDate = format(date, 'yyyy-MM-dd');\n    const evTime = format(date, edition?.format?.event_time || 'HH:mm');\n\n    // Create a map of events by day and time.\n    const timeEvents = [...(acc[evDate]?.[evTime] || []), event];\n\n    return {\n      ...acc,\n      [evDate]: {\n        ...(acc[evDate] || {}),\n        [evTime]: timeEvents\n      }\n    };\n  }, {});\n\n  const scrollPad = useBreakpointValue({ base: '5rem', md: '6rem' });\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    // When the page loads the animation has to run before being able to scroll,\n    // otherwise the position will be off.\n    setTimeout(() => {\n      document.getElementById(location.hash.slice(1))?.scrollIntoView();\n    }, EVENT_DISPLAY_DURATION + 100);\n  }, []);\n\n  return (\n    <PageLayout pageProps={props}>\n      <Global\n        styles={{\n          html: {\n            scrollPaddingTop: scrollPad\n          }\n        }}\n      />\n      <PageHero\n        title='Fringe Events'\n        lead='Happenings for the SatSummit Community.'\n      />\n\n      <Hug py={16}>\n        {Object.entries(eventsTimeGroups).map(([day, eventsByHour]) => {\n          return (\n            <Fragment key={day}>\n              <Heading\n                size='2xl'\n                gridColumn='content-start/content-end'\n                _notFirst={{\n                  pt: 8\n                }}\n                // Needed to override the border set around each event section.\n                sx={{\n                  '& + .agenda-time-group': {\n                    '.agenda-time, .agenda-events': {\n                      border: 'none !important',\n                      paddingTop: '0 !important'\n                    }\n                  }\n                }}\n              >\n                {format(utcString2userTzDate(day), 'EEEE, LLL dd')}\n              </Heading>\n\n              {Object.entries(eventsByHour).map(([time, events]) => (\n                <ChakraFade\n                  key={time}\n                  className='agenda-time-group'\n                  direction='up'\n                  triggerOnce\n                  duration={EVENT_DISPLAY_DURATION}\n                  gridColumn='content-start / content-end'\n                  _notFirst={{\n                    '.agenda-time': {\n                      borderTop: '8px solid',\n                      borderTopColor: 'base.200a',\n                      paddingTop: 8,\n                      mt: { base: 2, md: 0 }\n                    },\n                    '.agenda-events': {\n                      borderTop: { md: '8px solid' },\n                      borderTopColor: { md: 'base.200a' },\n                      paddingTop: { md: 8 }\n                    }\n                  }}\n                >\n                  <Hug\n                    as='section'\n                    hugGrid={{ base: ['content-start', 'content-end'] }}\n                  >\n                    <Box\n                      as='header'\n                      className='agenda-time'\n                      gridColumn={{\n                        base: 'content-start/content-end',\n                        md: 'content-start/content-2',\n                        lg: 'content-start/content-3'\n                      }}\n                    >\n                      <Heading as='h3' size='md'>\n                        {time}\n                      </Heading>\n                    </Box>\n                    <Hug\n                      as='section'\n                      className='agenda-events'\n                      hugGrid={{\n                        base: ['content-start', 'content-end'],\n                        md: ['content-2', 'content-end'],\n                        lg: ['content-3', 'content-end']\n                      }}\n                    >\n                      <Hug\n                        as={OrderedList}\n                        listStyleType='none'\n                        hugGrid={{\n                          base: ['content-start', 'content-end'],\n                          md: ['content-2', 'content-8'],\n                          lg: ['content-3', 'content-11']\n                        }}\n                        display='flex'\n                        flexFlow='column nowrap'\n                        ml={0}\n                      >\n                        {events.map((node) => (\n                          <ListItem\n                            key={node.id}\n                            gridColumn='1/-1'\n                            _notFirst={{\n                              borderTop: '4px solid',\n                              borderTopColor: 'base.200a',\n                              pt: { base: 4, md: 8, lg: 10 }\n                            }}\n                          >\n                            <AgendaEvent\n                              linkTo='/fringe/'\n                              startingHLevel={4}\n                              cId={node.cId}\n                              title={node.title}\n                              type={node.type}\n                              date={node.date}\n                              room={node.room}\n                              people={node.people}\n                            />\n                          </ListItem>\n                        ))}\n                      </Hug>\n                    </Hug>\n                  </Hug>\n                </ChakraFade>\n              ))}\n            </Fragment>\n          );\n        })}\n      </Hug>\n    </PageLayout>\n  );\n}\n\nexport const query = graphql`\n  query ($editionCId: String = \"\") {\n    ...EditionContextualData\n    allEvent(\n      filter: {\n        published: { eq: true }\n        fringe: { eq: true }\n        edition: { cId: { eq: $editionCId } }\n      }\n      sort: [{ weight: DESC }, { slug: ASC }, { date: ASC }]\n    ) {\n      nodes {\n        internal {\n          contentFilePath\n        }\n        id\n        cId\n        title\n        type\n        date\n        room\n        people {\n          ...AllEventPeople\n        }\n      }\n    }\n  }\n`;\n\nexport const Head = (props: HeadProps<FringePageQuery>) => (\n  <Seo\n    title='Fringe Events'\n    description='Happenings for the SatSummit Community.'\n    edition={props.data.edition}\n  />\n);\n","import { format } from 'date-fns';\n\n/**\n * Create a date which matches the input date offsetting the timezone to match\n * the user's.\n * If the user is in UTC-5 time and the date string is in UTC the date will be\n * constructed disregarding the input date's timezone.\n * Ex:\n * input: 2019-01-01T00:00:00Z\n * normal output: 2018-12-31T19:00:00 -05:00\n * utcDate output: 2019-01-01T00:00:00 -05:00\n *\n * Basically it parses the date ignoring the timezone and treats it as if the\n * date is already in the user's Tz.\n * Times I had timezone related bugs and this fn saved me: 8\n *\n * Reverse function of userTzDate2utcString()\n *\n * @param {string} str Date String\n * @returns Date\n */\nexport function utcString2userTzDate(str?: string | null) {\n  // Always return a Date even if invalid\n  if (typeof str !== 'string') {\n    return new Date('invalid');\n  }\n\n  // The date should always be in the user's TZ but the input string affects\n  // how the date is constructed.\n  // An input string of only year or with `-` (2020-01 | 2020-1-1) will be\n  // considered to be in ISO format, meaning that the user date will be this\n  // date +- the TZ offset. For example:\n  // 2020-01-01\n  //   Tue Dec 31 2019 19:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 01:00:00 GMT+0100 (Central European Time)\n  //\n  // whereas 2020/01/01\n  //   Wed Jan 01 2020 00:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 00:00:00 GMT+0100 (Central European Time)\n  // and if converted to ISO\n  //   2020-01-01T05:00:00.000Z\n  //   2020-01-01T01:00:00.000Z\n  //\n  // The code below ensures that all dates behave the same.\n  //\n  const isoYearOrMonth = str.match(/^([0-9]{4})(?:-([0-9]{1,2}))?$/);\n  const isoMatch = str.match(/^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})/);\n\n  if (isoYearOrMonth || isoMatch) {\n    const date = new Date(str);\n    // If the date is not valid, return it and be done.\n    if (isNaN(date.getTime())) return date;\n    const offset = date.getTimezoneOffset();\n    date.setTime(date.getTime() + offset * 60 * 1000);\n    return date;\n  } else {\n    // For the full date view Date does a good job, except with the ordinal\n    // numbers. Remove those from the date before parsing.\n    return new Date(str.replace(/([0-9])(st|nd|rd|th)/g, '$1'));\n  }\n}\n\n/**\n * Converts the date to a ISO string offsetting the timezone.\n *\n * Basically it coverts the date to a string ignoring the timezone and treating\n * it as if the date is already in UTC.\n *\n * Reverse function of utcString2userTzDate()\n *\n * @param date The Date\n * @returns string\n */\nexport function userTzDate2utcString(date: Date) {\n  const tz = date.getTimezoneOffset();\n  const d = new Date(date.getTime() - tz * 60000);\n  return d.toISOString();\n}\n\n// Creates a human readable string of dates without much repetition.\n// Groups by year and month, then lists the days.\n// Example:\n// The dates: [2022-09-28, 2022-09-29, 2022-10-01, 2022-01-01]\n// Will be displayed as:\n// September 28 & 29 & October 01, 2022 & January 01, 2022\nexport function multiDateDisplay(dates: Date[]) {\n  const group = dates.reduce(\n    (acc, date) => {\n      // Group by month and year\n      const y = date.getFullYear();\n      const m = date.getMonth();\n\n      const yGroup = acc[y] || {};\n      const mGroup = yGroup[m] || [];\n\n      return {\n        ...acc,\n        [y]: {\n          ...yGroup,\n          [m]: [...mGroup, date]\n        }\n      };\n    },\n    {} as Record<number, Record<number, Date[]>>\n  );\n\n  return Object.entries(group)\n    .map(([y, yGroup]) => {\n      const months = Object.entries(yGroup).map(([, mGroup]) => {\n        const days = mGroup.map((d) => format(d, 'dd')).join(' & ');\n        return `${format(mGroup[0], 'MMMM')} ${days}`;\n      });\n      return `${months.join(' & ')}, ${y}`;\n    })\n    .join(' & ');\n}"],"names":["FringePage","props","allEvent","edition","data","eventsTimeGroups","nodes","reduce","acc","event","_edition$format","_acc$evDate","date","parseEventDate","evDate","format","evTime","event_time","timeEvents","concat","_toConsumableArray","scrollPad","useBreakpointValue","base","md","useEffect","window","scrollTo","setTimeout","_document$getElementB","document","getElementById","location","hash","slice","scrollIntoView","EVENT_DISPLAY_DURATION","React","PageLayout","pageProps","Global","styles","html","scrollPaddingTop","PageHero","title","lead","Hug","py","Object","entries","map","_ref","day","eventsByHour","Fragment","key","Heading","size","gridColumn","_notFirst","pt","sx","border","paddingTop","utcString2userTzDate","_ref2","time","events","ChakraFade","className","direction","triggerOnce","duration","borderTop","borderTopColor","mt","as","hugGrid","Box","lg","OrderedList","listStyleType","display","flexFlow","ml","node","ListItem","id","AgendaEvent","linkTo","startingHLevel","cId","type","room","people","Head","Seo","description","str","Date","isoYearOrMonth","match","isoMatch","isNaN","getTime","offset","getTimezoneOffset","setTime","replace","multiDateDisplay","dates","group","y","getFullYear","m","getMonth","yGroup","mGroup","days","d","join"],"sourceRoot":""}