{"version":3,"file":"component---src-templates-agenda-hub-tsx-de5ad3e441685cf62520.js","mappings":"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","sources":["webpack://satsummit.io/./src/templates/agenda-hub.tsx","webpack://satsummit.io/./src/utils/date.ts"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { HeadProps, PageProps, graphql, navigate } from 'gatsby';\nimport { format } from 'date-fns';\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Flex,\n  Heading,\n  ListItem,\n  OrderedList,\n  Text,\n  useBreakpointValue\n} from '@chakra-ui/react';\nimport { Hug } from '@devseed-ui/hug-chakra';\nimport { Global } from '@emotion/react';\nimport {\n  CollecticonArrowLeft,\n  CollecticonArrowRight\n} from '@devseed-ui/collecticons-chakra';\n\nimport Seo from '$components/seo';\nimport PageLayout from '$components/page-layout';\nimport { AgendaEvent, EVENT_DISPLAY_DURATION } from '$components/agenda/event';\nimport SmartLink from '$components/smart-link';\nimport { ChakraFade } from '$components/reveal';\nimport { parseEventDate } from '$utils/utils';\nimport { utcString2userTzDate } from '$utils/date';\nimport { useEditionCId } from '$context/edition';\nimport { PageHeroFoundation, PageHeroHeadline } from '$components/page-hero';\n\ninterface AgendaEvent {\n  parent: {\n    body: string;\n  };\n  id: string;\n  cId: string;\n  title: string;\n  type: string;\n  date: string;\n  room: string;\n  people: Queries.EventPeople;\n}\n\ninterface AgendaPageQuery extends Queries.EditionContextualDataFragment {\n  allEvent: {\n    nodes: AgendaEvent[];\n  };\n  edition: Queries.EditionContextualDataFragment['edition'] & {\n    dates: string[];\n  };\n}\n\ninterface AgendaPageContext {\n  start: string;\n  end: string;\n  dayIndex: number;\n  editionCId: string;\n}\n\nexport default function AgendaPage(\n  props: PageProps<AgendaPageQuery, AgendaPageContext>\n) {\n  const { allEvent, edition } = props.data;\n  const { start, editionCId, dayIndex } = props.pageContext;\n\n  const hourGroups = useMemo(() => {\n    const indexObj = allEvent.nodes.reduce<Record<string, AgendaEvent[]>>(\n      (acc, event) => {\n        const t = format(\n          parseEventDate(event.date),\n          edition.format?.event_time || 'HH:mm'\n        );\n        return {\n          ...acc,\n          [t]: [...(acc[t] || []), event]\n        };\n      },\n      {}\n    );\n\n    return Object.entries(indexObj);\n  }, [allEvent.nodes, edition.format?.event_time]);\n\n  const scrollPad = useBreakpointValue({ base: '5rem', md: '6rem' });\n\n  const eventDates = edition.dates.map((d) => utcString2userTzDate(d));\n  const currentDay = utcString2userTzDate(start);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    // When the page loads the animation has to run before being able to scroll,\n    // otherwise the position will be off.\n    setTimeout(() => {\n      document.getElementById(location.hash.slice(1))?.scrollIntoView();\n    }, EVENT_DISPLAY_DURATION + 100);\n  }, []);\n\n  return (\n    <PageLayout pageProps={props}>\n      <Global\n        styles={{\n          html: {\n            scrollPaddingTop: scrollPad\n          }\n        }}\n      />\n      <PageHeroFoundation\n        innerProps={{\n          gap: 8,\n          flexFlow: 'column',\n          alignItems: 'start'\n        }}\n      >\n        <PageHeroHeadline title='Agenda' />\n\n        <Text textStyle='lead.lg' maxW='container.sm'>\n          {edition.dates.length} days of presentations and in-depth\n          conversations.{' '}\n          {edition.agenda?.status === 'draft' &&\n            'Agenda curation is still in full swing. Sessions and times might be subject to change.'}\n        </Text>\n\n        <ButtonGroup\n          isAttached\n          colorScheme='surface'\n          variant='soft-outline'\n          size={{ base: 'sm', md: 'md' }}\n        >\n          {eventDates.map((date, i) => (\n            <Button\n              key={date.getTime()}\n              as={SmartLink}\n              noLinkStyles\n              to={\n                !i ? `/${editionCId}/agenda/` : `/${editionCId}/agenda/${i + 1}`\n              }\n              isActive={date.getTime() === currentDay.getTime()}\n              color='currentColor'\n            >\n              {format(date, 'EEEE, LLL dd')}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </PageHeroFoundation>\n\n      <Hug py={{ base: 8, md: 16 }}>\n        <Heading as='h2' size='2xl' gridColumn='content-start/content-end'>\n          {format(currentDay, 'EEEE, LLL dd')}\n        </Heading>\n        {hourGroups.length === 0 && (\n          <Text gridColumn='content-start/content-end'>\n            No events scheduled for this day.\n          </Text>\n        )}\n        {hourGroups.map(([time, eventsByTime]) => (\n          <EventHourGroup\n            key={time}\n            dayIndex={dayIndex}\n            time={time}\n            day={format(currentDay, 'EEE, LLL dd')}\n            events={eventsByTime}\n          />\n        ))}\n      </Hug>\n\n      <TabsSecNav dates={eventDates} currentDay={currentDay} />\n    </PageLayout>\n  );\n}\n\ninterface EventHourGroup {\n  dayIndex: number;\n  time: string;\n  day: string;\n  events: AgendaEvent[];\n}\n\nfunction EventHourGroup(props: EventHourGroup) {\n  const { dayIndex, time, day, events } = props;\n\n  const timeRef = useRef<HTMLDivElement>(null);\n  const [isStuck, setStuck] = useState(false);\n\n  useEffect(() => {\n    if (!timeRef.current) return;\n\n    const observer = new IntersectionObserver(\n      ([e]) => setStuck(e.intersectionRatio < 1),\n      { threshold: [1] }\n    );\n\n    observer.observe(timeRef.current);\n\n    return () => observer.disconnect();\n  });\n\n  const sortedEvents = useMemo(() => {\n    return [...events].sort((a, b) => {\n      return a.room === b.room\n        ? a.title.localeCompare(b.title)\n        : a.room.localeCompare(b.room);\n    });\n  }, [events]);\n\n  return (\n    <ChakraFade\n      direction='up'\n      triggerOnce\n      gridColumn='content-start / content-end'\n      duration={EVENT_DISPLAY_DURATION}\n      _notFirst={{\n        '.agenda-time': {\n          borderTop: '8px solid',\n          borderTopColor: 'base.200a',\n          paddingTop: 8,\n          mt: { base: 2, md: 0 },\n          top: { base: '-2rem', md: '-1rem' }\n        },\n        '.agenda-events': {\n          borderTop: { md: '8px solid' },\n          borderTopColor: { md: 'base.200a' },\n          paddingTop: { md: 8 }\n        }\n      }}\n    >\n      <Hug as='section' hugGrid={{ base: ['content-start', 'content-end'] }}>\n        <Box\n          as='header'\n          ref={timeRef}\n          className='agenda-time'\n          gridColumn={{\n            base: 'content-start/content-end',\n            md: 'content-start/content-2',\n            lg: 'content-start/content-3'\n          }}\n          position='sticky'\n          top={{ base: '-1px' }}\n          zIndex={10}\n          alignSelf='flex-start'\n          margin={{\n            base: '0 -1rem',\n            md: 0\n          }}\n          px={{\n            base: 4,\n            md: 0\n          }}\n          py={{\n            base: isStuck ? 2 : 0,\n            md: isStuck ? 4 : 0\n          }}\n          background='surface.500'\n          boxShadow={{ base: isStuck ? 'md' : undefined, md: 'none' }}\n        >\n          <Heading\n            as='h3'\n            size='md'\n            display={{ base: 'flex', md: 'block' }}\n            alignItems='center'\n            gap={2}\n          >\n            {isStuck ? (\n              <>\n                {day}\n                <Divider\n                  borderColor='base.200a'\n                  size='xs'\n                  h='5'\n                  orientation='vertical'\n                  display={{ md: 'none' }}\n                />{' '}\n              </>\n            ) : null}\n            {time}\n          </Heading>\n        </Box>\n        <Hug\n          as='section'\n          className='agenda-events'\n          hugGrid={{\n            base: ['content-start', 'content-end'],\n            md: ['content-2', 'content-end'],\n            lg: ['content-3', 'content-end']\n          }}\n        >\n          <Hug\n            as={OrderedList}\n            listStyleType='none'\n            hugGrid={{\n              base: ['content-start', 'content-end'],\n              md: ['content-2', 'content-8'],\n              lg: ['content-3', 'content-11']\n            }}\n            display='flex'\n            flexFlow='column nowrap'\n            ml={0}\n          >\n            {sortedEvents.map((node) => (\n              <ListItem\n                key={node.id}\n                gridColumn='1/-1'\n                _notFirst={{\n                  borderTop: '4px solid',\n                  borderTopColor: 'base.200a',\n                  pt: { base: 4, md: 8, lg: 10 }\n                }}\n              >\n                <AgendaEvent\n                  startingHLevel={4}\n                  dayIndex={dayIndex}\n                  cId={node.cId}\n                  title={node.title}\n                  type={node.type}\n                  date={node.date}\n                  room={node.room}\n                  people={node.people}\n                />\n              </ListItem>\n            ))}\n          </Hug>\n        </Hug>\n      </Hug>\n    </ChakraFade>\n  );\n}\n\nfunction TabsSecNav(props: { dates: Date[]; currentDay: Date }) {\n  const { dates, currentDay } = props;\n\n  const editionCId = useEditionCId();\n\n  const activeIdx = dates.findIndex(\n    (d) => d.getTime() === currentDay.getTime()\n  );\n\n  const goToTab = useCallback(\n    (idx: number) => {\n      navigate(\n        !idx ? `/${editionCId}/agenda/` : `/${editionCId}/agenda/${idx + 1}`\n      );\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    },\n    [editionCId]\n  );\n\n  return (\n    <Hug pb={16}>\n      <Flex gridColumn='content-start / content-end'>\n        {activeIdx > 0 && (\n          <Button\n            variant='solid'\n            colorScheme='primary'\n            size={{ base: 'md', md: 'lg' }}\n            onClick={() => {\n              goToTab(activeIdx - 1);\n            }}\n            leftIcon={<CollecticonArrowLeft />}\n          >\n            View previous day\n          </Button>\n        )}\n        {activeIdx < dates.length - 1 && (\n          <Button\n            variant='solid'\n            colorScheme='primary'\n            size={{ base: 'md', md: 'lg' }}\n            ml='auto'\n            onClick={() => {\n              goToTab(activeIdx + 1);\n            }}\n            rightIcon={<CollecticonArrowRight />}\n          >\n            View next day\n          </Button>\n        )}\n      </Flex>\n    </Hug>\n  );\n}\n\nexport const query = graphql`\n  query AgendaHub($start: Date, $end: Date, $editionCId: String = \"\") {\n    ...EditionContextualData\n    allEvent(\n      filter: {\n        date: { gt: $start, lt: $end }\n        published: { eq: true }\n        fringe: { eq: false }\n        edition: { cId: { eq: $editionCId } }\n      }\n      sort: [{ date: ASC }, { weight: DESC }, { slug: ASC }]\n    ) {\n      nodes {\n        internal {\n          contentFilePath\n        }\n        id\n        cId\n        title\n        type\n        date\n        room\n        fringe\n        people {\n          ...AllEventPeople\n        }\n      }\n    }\n    edition(cId: { eq: $editionCId }) {\n      dates\n    }\n  }\n`;\n\nexport const Head = (props: HeadProps<AgendaPageQuery>) => (\n  <Seo\n    title='Agenda'\n    description={`${props.data.edition.dates.length} days of presentations and in-depth conversations.`}\n    edition={props.data.edition}\n  />\n);\n","import { format } from 'date-fns';\n\n/**\n * Create a date which matches the input date offsetting the timezone to match\n * the user's.\n * If the user is in UTC-5 time and the date string is in UTC the date will be\n * constructed disregarding the input date's timezone.\n * Ex:\n * input: 2019-01-01T00:00:00Z\n * normal output: 2018-12-31T19:00:00 -05:00\n * utcDate output: 2019-01-01T00:00:00 -05:00\n *\n * Basically it parses the date ignoring the timezone and treats it as if the\n * date is already in the user's Tz.\n * Times I had timezone related bugs and this fn saved me: 8\n *\n * Reverse function of userTzDate2utcString()\n *\n * @param {string} str Date String\n * @returns Date\n */\nexport function utcString2userTzDate(str?: string | null) {\n  // Always return a Date even if invalid\n  if (typeof str !== 'string') {\n    return new Date('invalid');\n  }\n\n  // The date should always be in the user's TZ but the input string affects\n  // how the date is constructed.\n  // An input string of only year or with `-` (2020-01 | 2020-1-1) will be\n  // considered to be in ISO format, meaning that the user date will be this\n  // date +- the TZ offset. For example:\n  // 2020-01-01\n  //   Tue Dec 31 2019 19:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 01:00:00 GMT+0100 (Central European Time)\n  //\n  // whereas 2020/01/01\n  //   Wed Jan 01 2020 00:00:00 GMT-0500 (Eastern Standard Time)\n  //   Wed Jan 01 2020 00:00:00 GMT+0100 (Central European Time)\n  // and if converted to ISO\n  //   2020-01-01T05:00:00.000Z\n  //   2020-01-01T01:00:00.000Z\n  //\n  // The code below ensures that all dates behave the same.\n  //\n  const isoYearOrMonth = str.match(/^([0-9]{4})(?:-([0-9]{1,2}))?$/);\n  const isoMatch = str.match(/^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})/);\n\n  if (isoYearOrMonth || isoMatch) {\n    const date = new Date(str);\n    // If the date is not valid, return it and be done.\n    if (isNaN(date.getTime())) return date;\n    const offset = date.getTimezoneOffset();\n    date.setTime(date.getTime() + offset * 60 * 1000);\n    return date;\n  } else {\n    // For the full date view Date does a good job, except with the ordinal\n    // numbers. Remove those from the date before parsing.\n    return new Date(str.replace(/([0-9])(st|nd|rd|th)/g, '$1'));\n  }\n}\n\n/**\n * Converts the date to a ISO string offsetting the timezone.\n *\n * Basically it coverts the date to a string ignoring the timezone and treating\n * it as if the date is already in UTC.\n *\n * Reverse function of utcString2userTzDate()\n *\n * @param date The Date\n * @returns string\n */\nexport function userTzDate2utcString(date: Date) {\n  const tz = date.getTimezoneOffset();\n  const d = new Date(date.getTime() - tz * 60000);\n  return d.toISOString();\n}\n\n// Creates a human readable string of dates without much repetition.\n// Groups by year and month, then lists the days.\n// Example:\n// The dates: [2022-09-28, 2022-09-29, 2022-10-01, 2022-01-01]\n// Will be displayed as:\n// September 28 & 29 & October 01, 2022 & January 01, 2022\nexport function multiDateDisplay(dates: Date[]) {\n  const group = dates.reduce(\n    (acc, date) => {\n      // Group by month and year\n      const y = date.getFullYear();\n      const m = date.getMonth();\n\n      const yGroup = acc[y] || {};\n      const mGroup = yGroup[m] || [];\n\n      return {\n        ...acc,\n        [y]: {\n          ...yGroup,\n          [m]: [...mGroup, date]\n        }\n      };\n    },\n    {} as Record<number, Record<number, Date[]>>\n  );\n\n  return Object.entries(group)\n    .map(([y, yGroup]) => {\n      const months = Object.entries(yGroup).map(([, mGroup]) => {\n        const days = mGroup.map((d) => format(d, 'dd')).join(' & ');\n        return `${format(mGroup[0], 'MMMM')} ${days}`;\n      });\n      return `${months.join(' & ')}, ${y}`;\n    })\n    .join(' & ');\n}"],"names":["AgendaPage","props","_edition$format2","_edition$agenda","allEvent","edition","data","start","editionCId","dayIndex","pageContext","hourGroups","useMemo","indexObj","nodes","reduce","acc","event","_edition$format","t","format","parseEventDate","date","event_time","concat","_toConsumableArray","Object","entries","scrollPad","useBreakpointValue","base","md","eventDates","dates","map","d","utcString2userTzDate","currentDay","useEffect","window","scrollTo","setTimeout","_document$getElementB","document","getElementById","location","hash","slice","scrollIntoView","EVENT_DISPLAY_DURATION","React","PageLayout","pageProps","Global","styles","html","scrollPaddingTop","PageHeroFoundation","innerProps","gap","flexFlow","alignItems","PageHeroHeadline","title","Text","textStyle","maxW","length","agenda","status","ButtonGroup","isAttached","colorScheme","variant","size","i","Button","key","getTime","as","SmartLink","noLinkStyles","to","isActive","color","Hug","py","Heading","gridColumn","_ref","time","eventsByTime","EventHourGroup","day","events","TabsSecNav","timeRef","useRef","isStuck","setStuck","useState","current","observer","IntersectionObserver","_ref2","e","intersectionRatio","threshold","observe","disconnect","sortedEvents","sort","a","b","room","localeCompare","ChakraFade","direction","triggerOnce","duration","_notFirst","borderTop","borderTopColor","paddingTop","mt","top","hugGrid","Box","ref","className","lg","position","zIndex","alignSelf","margin","px","background","boxShadow","undefined","display","Divider","borderColor","h","orientation","OrderedList","listStyleType","ml","node","ListItem","id","pt","AgendaEvent","startingHLevel","cId","type","people","useEditionCId","activeIdx","findIndex","goToTab","useCallback","idx","navigate","behavior","pb","Flex","onClick","leftIcon","CollecticonArrowLeft","rightIcon","CollecticonArrowRight","Head","Seo","description","str","Date","isoYearOrMonth","match","isoMatch","isNaN","offset","getTimezoneOffset","setTime","replace","multiDateDisplay","group","y","getFullYear","m","getMonth","yGroup","mGroup","days","join"],"sourceRoot":""}